
/Users/nicholasho/Desktop/particleBLE2/BLEtest2/target/BLEtest2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a08  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000000  2003f400  2003f400  00016ac4  2**0
                  CONTENTS
  3 .data         00000078  2003e32c  000d6a20  0000e32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000044c  2003e3a4  2003e3a4  0001e3a4  2**2
                  ALLOC
  5 .module_info_suffix 00000028  000d6a98  000d6a98  00016a98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  000d6ac0  000d6ac0  00016ac0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000cea58  00000000  00000000  00016ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000fe8a  00000000  00000000  000e551c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0001b879  00000000  00000000  000f53a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000024b8  00000000  00000000  00110c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000043b8  00000000  00000000  001130d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00034218  00000000  00000000  0011748f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00025a28  00000000  00000000  0014b6a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00105956  00000000  00000000  001710cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c824  00000000  00000000  00276a28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	78 65 0d 00                                         xe..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fa44 	bl	d64ba <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fa64 	bl	d6506 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e32c 	.word	0x2003e32c
   d4048:	000d6a20 	.word	0x000d6a20
   d404c:	2003e3a4 	.word	0x2003e3a4
   d4050:	2003e3a4 	.word	0x2003e3a4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 f817 	bl	d608c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6a1c 	.word	0x000d6a1c
   d4080:	000d69e4 	.word	0x000d69e4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b822 	b.w	d40cc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f885 	bl	d4198 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 bfc9 	b.w	d6028 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 baa1 	b.w	d45dc <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 baa7 	b.w	d45ec <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 baa5 	b.w	d45ec <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

//Static function for handling Bluetooth Low Energy callbacks
static void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {

  // Sets the global level
  if( context == light ) {
   d40b4:	4a03      	ldr	r2, [pc, #12]	; (d40c4 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10>)
   d40b6:	6812      	ldr	r2, [r2, #0]
   d40b8:	429a      	cmp	r2, r3
    m_led_level.light = data[0];
   d40ba:	bf02      	ittt	eq
   d40bc:	4b02      	ldreq	r3, [pc, #8]	; (d40c8 <_ZL14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d40be:	7802      	ldrbeq	r2, [r0, #0]
   d40c0:	701a      	strbeq	r2, [r3, #0]
   d40c2:	4770      	bx	lr
   d40c4:	2003e32c 	.word	0x2003e32c
   d40c8:	2003e3a8 	.word	0x2003e3a8

000d40cc <setup>:
}

}

void setup() {
   d40cc:	b5f0      	push	{r4, r5, r6, r7, lr}

// RGB.control(true);
// RGB.control(m_led_level.green);

pinMode(led1, OUTPUT);
   d40ce:	4b2c      	ldr	r3, [pc, #176]	; (d4180 <setup+0xb4>)
pinMode(led2, OUTPUT);

  // Set the RGB BLE service
BleUuid rgbService(serviceUuid);
   d40d0:	4c2c      	ldr	r4, [pc, #176]	; (d4184 <setup+0xb8>)
void setup() {

// RGB.control(true);
// RGB.control(m_led_level.green);

pinMode(led1, OUTPUT);
   d40d2:	8818      	ldrh	r0, [r3, #0]
    m_led_level.light = data[0];
}

}

void setup() {
   d40d4:	b0a1      	sub	sp, #132	; 0x84

// RGB.control(true);
// RGB.control(m_led_level.green);

pinMode(led1, OUTPUT);
   d40d6:	2101      	movs	r1, #1
   d40d8:	f002 f816 	bl	d6108 <pinMode>
pinMode(led2, OUTPUT);
   d40dc:	4b2a      	ldr	r3, [pc, #168]	; (d4188 <setup+0xbc>)
   d40de:	2101      	movs	r1, #1
   d40e0:	8818      	ldrh	r0, [r3, #0]
   d40e2:	f002 f811 	bl	d6108 <pinMode>

  // Set the RGB BLE service
BleUuid rgbService(serviceUuid);
   d40e6:	6821      	ldr	r1, [r4, #0]
   d40e8:	a808      	add	r0, sp, #32
   d40ea:	f000 fb35 	bl	d4758 <_ZN8particle7BleUuidC1EPKc>

BleCharacteristic redCharacteristic("lightValue", BleCharacteristicProperty::WRITE_WO_RSP, light, serviceUuid, onDataReceived, (void*)light);
   d40ee:	4b27      	ldr	r3, [pc, #156]	; (d418c <setup+0xc0>)
   d40f0:	6827      	ldr	r7, [r4, #0]
   d40f2:	681e      	ldr	r6, [r3, #0]
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }
    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d40f4:	ac17      	add	r4, sp, #92	; 0x5c

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d40f6:	2500      	movs	r5, #0
    BleCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }
    template<typename T>
    BleCharacteristic(const char* desc, BleCharacteristicProperty properties, T charUuid, T svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d40f8:	4631      	mov	r1, r6
   d40fa:	a812      	add	r0, sp, #72	; 0x48
   d40fc:	9506      	str	r5, [sp, #24]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d40fe:	9507      	str	r5, [sp, #28]
   d4100:	f000 fb2a 	bl	d4758 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4104:	4639      	mov	r1, r7
   d4106:	4620      	mov	r0, r4
   d4108:	f000 fb26 	bl	d4758 <_ZN8particle7BleUuidC1EPKc>
        construct(desc, properties, cUuid, sUuid, callback, context);
   d410c:	4b20      	ldr	r3, [pc, #128]	; (d4190 <setup+0xc4>)
   d410e:	4921      	ldr	r1, [pc, #132]	; (d4194 <setup+0xc8>)
   d4110:	9301      	str	r3, [sp, #4]
   d4112:	2204      	movs	r2, #4
   d4114:	ab12      	add	r3, sp, #72	; 0x48
   d4116:	a806      	add	r0, sp, #24
   d4118:	9602      	str	r6, [sp, #8]
   d411a:	9400      	str	r4, [sp, #0]
   d411c:	f001 f9b8 	bl	d5490 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>

 // Add the characteristics
 BLE.addCharacteristic(redCharacteristic);
   d4120:	f000 fecc 	bl	d4ebc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4124:	a906      	add	r1, sp, #24
   d4126:	f001 fad5 	bl	d56d4 <_ZNK8particle14BleLocalDevice17addCharacteristicERNS_17BleCharacteristicE>

 // Advertising data
 BleAdvertisingData advData;
   d412a:	4620      	mov	r0, r4
   d412c:	f000 fbfe 	bl	d492c <_ZN8particle18BleAdvertisingDataC1Ev>

 // Add the RGB LED service
 advData.appendServiceUUID(rgbService);
   d4130:	a908      	add	r1, sp, #32
   d4132:	a80d      	add	r0, sp, #52	; 0x34
   d4134:	f000 fad2 	bl	d46dc <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4138:	a90d      	add	r1, sp, #52	; 0x34
   d413a:	a812      	add	r0, sp, #72	; 0x48
   d413c:	f000 face 	bl	d46dc <_ZN8particle7BleUuidC1ERKS0_>
    ~BleUuid() = default;

    bool isValid() const;

    BleUuidType type() const {
        if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d4140:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   d4144:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
   d4148:	d004      	beq.n	d4154 <setup+0x88>
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.full(), BLE_SIG_UUID_128BIT_LEN, force);
   d414a:	9500      	str	r5, [sp, #0]
   d414c:	2310      	movs	r3, #16
   d414e:	aa12      	add	r2, sp, #72	; 0x48
   d4150:	2107      	movs	r1, #7
   d4152:	e007      	b.n	d4164 <setup+0x98>

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d4154:	aa20      	add	r2, sp, #128	; 0x80
   d4156:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d415a:	f822 1d6a 	strh.w	r1, [r2, #-106]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d415e:	9300      	str	r3, [sp, #0]
   d4160:	2103      	movs	r1, #3
   d4162:	2302      	movs	r3, #2
   d4164:	4620      	mov	r0, r4
   d4166:	f000 fb9a 	bl	d489e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>

 // Start advertising!
 BLE.advertise(&advData);
   d416a:	f000 fea7 	bl	d4ebc <_ZN8particle14BleLocalDevice11getInstanceEv>
   d416e:	2200      	movs	r2, #0
   d4170:	4621      	mov	r1, r4
   d4172:	f000 fcbb 	bl	d4aec <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
pinMode(led2, OUTPUT);

  // Set the RGB BLE service
BleUuid rgbService(serviceUuid);

BleCharacteristic redCharacteristic("lightValue", BleCharacteristicProperty::WRITE_WO_RSP, light, serviceUuid, onDataReceived, (void*)light);
   d4176:	a806      	add	r0, sp, #24
   d4178:	f000 fd03 	bl	d4b82 <_ZN8particle17BleCharacteristicD1Ev>
 advData.appendServiceUUID(rgbService);

 // Start advertising!
 BLE.advertise(&advData);

}
   d417c:	b021      	add	sp, #132	; 0x84
   d417e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4180:	2003e330 	.word	0x2003e330
   d4184:	2003e334 	.word	0x2003e334
   d4188:	2003e338 	.word	0x2003e338
   d418c:	2003e32c 	.word	0x2003e32c
   d4190:	000d40b5 	.word	0x000d40b5
   d4194:	000d658c 	.word	0x000d658c

000d4198 <loop>:

void loop() {
   d4198:	b538      	push	{r3, r4, r5, lr}
  // num++;
  // }

  // delay(5000);

if(m_led_level.light){
   d419a:	4b0c      	ldr	r3, [pc, #48]	; (d41cc <loop+0x34>)
   d419c:	4d0c      	ldr	r5, [pc, #48]	; (d41d0 <loop+0x38>)
   d419e:	781c      	ldrb	r4, [r3, #0]
   d41a0:	4b0c      	ldr	r3, [pc, #48]	; (d41d4 <loop+0x3c>)
   d41a2:	b12c      	cbz	r4, d41b0 <loop+0x18>
            digitalWrite(led1, HIGH);
   d41a4:	2101      	movs	r1, #1
   d41a6:	8818      	ldrh	r0, [r3, #0]
   d41a8:	f001 ffbf 	bl	d612a <digitalWrite>
            digitalWrite(led2, HIGH);
   d41ac:	2101      	movs	r1, #1
   d41ae:	e004      	b.n	d41ba <loop+0x22>
} else {
           digitalWrite(led1, LOW);
   d41b0:	4621      	mov	r1, r4
   d41b2:	8818      	ldrh	r0, [r3, #0]
   d41b4:	f001 ffb9 	bl	d612a <digitalWrite>
           digitalWrite(led2, LOW);
   d41b8:	4621      	mov	r1, r4
   d41ba:	8828      	ldrh	r0, [r5, #0]
   d41bc:	f001 ffb5 	bl	d612a <digitalWrite>
}

delay(500);
   d41c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d41c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
} else {
           digitalWrite(led1, LOW);
           digitalWrite(led2, LOW);
}

delay(500);
   d41c8:	f000 ba20 	b.w	d460c <delay>
   d41cc:	2003e3a8 	.word	0x2003e3a8
   d41d0:	2003e338 	.word	0x2003e338
   d41d4:	2003e330 	.word	0x2003e330

000d41d8 <_GLOBAL__sub_I_led1>:

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d41d8:	f000 b88c 	b.w	d42f4 <HAL_Pin_Map>

000d41dc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d41dc:	b508      	push	{r3, lr}
   d41de:	4b02      	ldr	r3, [pc, #8]	; (d41e8 <hal_ble_stack_init+0xc>)
   d41e0:	681b      	ldr	r3, [r3, #0]
   d41e2:	689b      	ldr	r3, [r3, #8]
   d41e4:	9301      	str	r3, [sp, #4]
   d41e6:	bd08      	pop	{r3, pc}
   d41e8:	00030274 	.word	0x00030274

000d41ec <hal_ble_set_callback_on_events>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events, int(hal_ble_on_generic_evt_cb_t, void*, void*))
   d41ec:	b508      	push	{r3, lr}
   d41ee:	4b02      	ldr	r3, [pc, #8]	; (d41f8 <hal_ble_set_callback_on_events+0xc>)
   d41f0:	681b      	ldr	r3, [r3, #0]
   d41f2:	695b      	ldr	r3, [r3, #20]
   d41f4:	9301      	str	r3, [sp, #4]
   d41f6:	bd08      	pop	{r3, pc}
   d41f8:	00030274 	.word	0x00030274

000d41fc <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d41fc:	b508      	push	{r3, lr}
   d41fe:	4b02      	ldr	r3, [pc, #8]	; (d4208 <hal_ble_gap_set_advertising_data+0xc>)
   d4200:	681b      	ldr	r3, [r3, #0]
   d4202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4204:	9301      	str	r3, [sp, #4]
   d4206:	bd08      	pop	{r3, pc}
   d4208:	00030274 	.word	0x00030274

000d420c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d420c:	b508      	push	{r3, lr}
   d420e:	4b02      	ldr	r3, [pc, #8]	; (d4218 <hal_ble_gap_set_scan_response_data+0xc>)
   d4210:	681b      	ldr	r3, [r3, #0]
   d4212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4214:	9301      	str	r3, [sp, #4]
   d4216:	bd08      	pop	{r3, pc}
   d4218:	00030274 	.word	0x00030274

000d421c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d421c:	b508      	push	{r3, lr}
   d421e:	4b02      	ldr	r3, [pc, #8]	; (d4228 <hal_ble_gap_start_advertising+0xc>)
   d4220:	681b      	ldr	r3, [r3, #0]
   d4222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4224:	9301      	str	r3, [sp, #4]
   d4226:	bd08      	pop	{r3, pc}
   d4228:	00030274 	.word	0x00030274

000d422c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d422c:	b508      	push	{r3, lr}
   d422e:	4b03      	ldr	r3, [pc, #12]	; (d423c <hal_ble_gatt_server_add_service+0x10>)
   d4230:	681b      	ldr	r3, [r3, #0]
   d4232:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4236:	9301      	str	r3, [sp, #4]
   d4238:	bd08      	pop	{r3, pc}
   d423a:	0000      	.short	0x0000
   d423c:	00030274 	.word	0x00030274

000d4240 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4240:	b508      	push	{r3, lr}
   d4242:	4b03      	ldr	r3, [pc, #12]	; (d4250 <hal_ble_gatt_server_add_characteristic+0x10>)
   d4244:	681b      	ldr	r3, [r3, #0]
   d4246:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d424a:	9301      	str	r3, [sp, #4]
   d424c:	bd08      	pop	{r3, pc}
   d424e:	0000      	.short	0x0000
   d4250:	00030274 	.word	0x00030274

000d4254 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4254:	b508      	push	{r3, lr}
   d4256:	4b02      	ldr	r3, [pc, #8]	; (d4260 <os_thread_is_current+0xc>)
   d4258:	681b      	ldr	r3, [r3, #0]
   d425a:	689b      	ldr	r3, [r3, #8]
   d425c:	9301      	str	r3, [sp, #4]
   d425e:	bd08      	pop	{r3, pc}
   d4260:	00030248 	.word	0x00030248

000d4264 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4264:	b508      	push	{r3, lr}
   d4266:	4b02      	ldr	r3, [pc, #8]	; (d4270 <os_thread_join+0xc>)
   d4268:	681b      	ldr	r3, [r3, #0]
   d426a:	691b      	ldr	r3, [r3, #16]
   d426c:	9301      	str	r3, [sp, #4]
   d426e:	bd08      	pop	{r3, pc}
   d4270:	00030248 	.word	0x00030248

000d4274 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4274:	b508      	push	{r3, lr}
   d4276:	4b02      	ldr	r3, [pc, #8]	; (d4280 <os_thread_cleanup+0xc>)
   d4278:	681b      	ldr	r3, [r3, #0]
   d427a:	695b      	ldr	r3, [r3, #20]
   d427c:	9301      	str	r3, [sp, #4]
   d427e:	bd08      	pop	{r3, pc}
   d4280:	00030248 	.word	0x00030248

000d4284 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4284:	b508      	push	{r3, lr}
   d4286:	4b02      	ldr	r3, [pc, #8]	; (d4290 <os_mutex_create+0xc>)
   d4288:	681b      	ldr	r3, [r3, #0]
   d428a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d428c:	9301      	str	r3, [sp, #4]
   d428e:	bd08      	pop	{r3, pc}
   d4290:	00030248 	.word	0x00030248

000d4294 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4294:	b508      	push	{r3, lr}
   d4296:	4b02      	ldr	r3, [pc, #8]	; (d42a0 <os_mutex_recursive_create+0xc>)
   d4298:	681b      	ldr	r3, [r3, #0]
   d429a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d429c:	9301      	str	r3, [sp, #4]
   d429e:	bd08      	pop	{r3, pc}
   d42a0:	00030248 	.word	0x00030248

000d42a4 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d42a4:	b508      	push	{r3, lr}
   d42a6:	4b02      	ldr	r3, [pc, #8]	; (d42b0 <os_mutex_recursive_lock+0xc>)
   d42a8:	681b      	ldr	r3, [r3, #0]
   d42aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d42ac:	9301      	str	r3, [sp, #4]
   d42ae:	bd08      	pop	{r3, pc}
   d42b0:	00030248 	.word	0x00030248

000d42b4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d42b4:	b508      	push	{r3, lr}
   d42b6:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <os_mutex_recursive_unlock+0xc>)
   d42b8:	681b      	ldr	r3, [r3, #0]
   d42ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d42bc:	9301      	str	r3, [sp, #4]
   d42be:	bd08      	pop	{r3, pc}
   d42c0:	00030248 	.word	0x00030248

000d42c4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42c4:	b508      	push	{r3, lr}
   d42c6:	4b02      	ldr	r3, [pc, #8]	; (d42d0 <HAL_RNG_GetRandomNumber+0xc>)
   d42c8:	681b      	ldr	r3, [r3, #0]
   d42ca:	685b      	ldr	r3, [r3, #4]
   d42cc:	9301      	str	r3, [sp, #4]
   d42ce:	bd08      	pop	{r3, pc}
   d42d0:	00030218 	.word	0x00030218

000d42d4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d42d4:	b508      	push	{r3, lr}
   d42d6:	4b02      	ldr	r3, [pc, #8]	; (d42e0 <HAL_Delay_Microseconds+0xc>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	68db      	ldr	r3, [r3, #12]
   d42dc:	9301      	str	r3, [sp, #4]
   d42de:	bd08      	pop	{r3, pc}
   d42e0:	00030218 	.word	0x00030218

000d42e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b02      	ldr	r3, [pc, #8]	; (d42f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	695b      	ldr	r3, [r3, #20]
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	bd08      	pop	{r3, pc}
   d42f0:	00030218 	.word	0x00030218

000d42f4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d42f4:	b508      	push	{r3, lr}
   d42f6:	4b02      	ldr	r3, [pc, #8]	; (d4300 <HAL_Pin_Map+0xc>)
   d42f8:	681b      	ldr	r3, [r3, #0]
   d42fa:	681b      	ldr	r3, [r3, #0]
   d42fc:	9301      	str	r3, [sp, #4]
   d42fe:	bd08      	pop	{r3, pc}
   d4300:	0003022c 	.word	0x0003022c

000d4304 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <HAL_Pin_Mode+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	689b      	ldr	r3, [r3, #8]
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	0003022c 	.word	0x0003022c

000d4314 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <HAL_Get_Pin_Mode+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	68db      	ldr	r3, [r3, #12]
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	0003022c 	.word	0x0003022c

000d4324 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <HAL_GPIO_Write+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	691b      	ldr	r3, [r3, #16]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	0003022c 	.word	0x0003022c

000d4334 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <HAL_I2C_Write_Data+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	6a1b      	ldr	r3, [r3, #32]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	00030228 	.word	0x00030228

000d4344 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <HAL_I2C_Available_Data+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	00030228 	.word	0x00030228

000d4354 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <HAL_I2C_Read_Data+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	00030228 	.word	0x00030228

000d4364 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <HAL_I2C_Peek_Data+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	00030228 	.word	0x00030228

000d4374 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <HAL_I2C_Flush_Data+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	00030228 	.word	0x00030228

000d4384 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <HAL_I2C_Is_Enabled+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	00030228 	.word	0x00030228

000d4394 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <HAL_I2C_Init+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	00030228 	.word	0x00030228

000d43a4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <inet_inet_ntop+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	695b      	ldr	r3, [r3, #20]
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	00030264 	.word	0x00030264

000d43b4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <netdb_freeaddrinfo+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	689b      	ldr	r3, [r3, #8]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	00030268 	.word	0x00030268

000d43c4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <netdb_getaddrinfo+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	68db      	ldr	r3, [r3, #12]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	00030268 	.word	0x00030268

000d43d4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_SPI_Init+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	69db      	ldr	r3, [r3, #28]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	00030230 	.word	0x00030230

000d43e4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_SPI_Is_Enabled+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	6a1b      	ldr	r3, [r3, #32]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	00030230 	.word	0x00030230

000d43f4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_USART_Init+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	681b      	ldr	r3, [r3, #0]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	0003023c 	.word	0x0003023c

000d4404 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_USART_Write_Data+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	68db      	ldr	r3, [r3, #12]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	0003023c 	.word	0x0003023c

000d4414 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <HAL_USART_Available_Data+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	691b      	ldr	r3, [r3, #16]
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	0003023c 	.word	0x0003023c

000d4424 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b02      	ldr	r3, [pc, #8]	; (d4430 <HAL_USART_Read_Data+0xc>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	695b      	ldr	r3, [r3, #20]
   d442c:	9301      	str	r3, [sp, #4]
   d442e:	bd08      	pop	{r3, pc}
   d4430:	0003023c 	.word	0x0003023c

000d4434 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4434:	b508      	push	{r3, lr}
   d4436:	4b02      	ldr	r3, [pc, #8]	; (d4440 <HAL_USART_Peek_Data+0xc>)
   d4438:	681b      	ldr	r3, [r3, #0]
   d443a:	699b      	ldr	r3, [r3, #24]
   d443c:	9301      	str	r3, [sp, #4]
   d443e:	bd08      	pop	{r3, pc}
   d4440:	0003023c 	.word	0x0003023c

000d4444 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4444:	b508      	push	{r3, lr}
   d4446:	4b02      	ldr	r3, [pc, #8]	; (d4450 <HAL_USART_Flush_Data+0xc>)
   d4448:	681b      	ldr	r3, [r3, #0]
   d444a:	69db      	ldr	r3, [r3, #28]
   d444c:	9301      	str	r3, [sp, #4]
   d444e:	bd08      	pop	{r3, pc}
   d4450:	0003023c 	.word	0x0003023c

000d4454 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4454:	b508      	push	{r3, lr}
   d4456:	4b02      	ldr	r3, [pc, #8]	; (d4460 <HAL_USART_Is_Enabled+0xc>)
   d4458:	681b      	ldr	r3, [r3, #0]
   d445a:	6a1b      	ldr	r3, [r3, #32]
   d445c:	9301      	str	r3, [sp, #4]
   d445e:	bd08      	pop	{r3, pc}
   d4460:	0003023c 	.word	0x0003023c

000d4464 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4464:	b508      	push	{r3, lr}
   d4466:	4b02      	ldr	r3, [pc, #8]	; (d4470 <HAL_USART_Available_Data_For_Write+0xc>)
   d4468:	681b      	ldr	r3, [r3, #0]
   d446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d446c:	9301      	str	r3, [sp, #4]
   d446e:	bd08      	pop	{r3, pc}
   d4470:	0003023c 	.word	0x0003023c

000d4474 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4474:	b508      	push	{r3, lr}
   d4476:	4b02      	ldr	r3, [pc, #8]	; (d4480 <HAL_USB_USART_Init+0xc>)
   d4478:	681b      	ldr	r3, [r3, #0]
   d447a:	681b      	ldr	r3, [r3, #0]
   d447c:	9301      	str	r3, [sp, #4]
   d447e:	bd08      	pop	{r3, pc}
   d4480:	0003024c 	.word	0x0003024c

000d4484 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4484:	b508      	push	{r3, lr}
   d4486:	4b02      	ldr	r3, [pc, #8]	; (d4490 <HAL_USB_USART_Available_Data+0xc>)
   d4488:	681b      	ldr	r3, [r3, #0]
   d448a:	691b      	ldr	r3, [r3, #16]
   d448c:	9301      	str	r3, [sp, #4]
   d448e:	bd08      	pop	{r3, pc}
   d4490:	0003024c 	.word	0x0003024c

000d4494 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4494:	b508      	push	{r3, lr}
   d4496:	4b02      	ldr	r3, [pc, #8]	; (d44a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4498:	681b      	ldr	r3, [r3, #0]
   d449a:	695b      	ldr	r3, [r3, #20]
   d449c:	9301      	str	r3, [sp, #4]
   d449e:	bd08      	pop	{r3, pc}
   d44a0:	0003024c 	.word	0x0003024c

000d44a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <HAL_USB_USART_Receive_Data+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	699b      	ldr	r3, [r3, #24]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	0003024c 	.word	0x0003024c

000d44b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <HAL_USB_USART_Send_Data+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	69db      	ldr	r3, [r3, #28]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	0003024c 	.word	0x0003024c

000d44c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <HAL_USB_USART_Flush_Data+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6a1b      	ldr	r3, [r3, #32]
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	0003024c 	.word	0x0003024c

000d44d4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <panic_+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030260 	.word	0x00030260

000d44e4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <set_system_mode+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	685b      	ldr	r3, [r3, #4]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030220 	.word	0x00030220

000d44f4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <system_delay_ms+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	695b      	ldr	r3, [r3, #20]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030220 	.word	0x00030220

000d4504 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b03      	ldr	r3, [pc, #12]	; (d4514 <system_ctrl_set_app_request_handler+0x10>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d450e:	9301      	str	r3, [sp, #4]
   d4510:	bd08      	pop	{r3, pc}
   d4512:	0000      	.short	0x0000
   d4514:	00030220 	.word	0x00030220

000d4518 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b03      	ldr	r3, [pc, #12]	; (d4528 <system_ctrl_set_result+0x10>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4522:	9301      	str	r3, [sp, #4]
   d4524:	bd08      	pop	{r3, pc}
   d4526:	0000      	.short	0x0000
   d4528:	00030220 	.word	0x00030220

000d452c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d452c:	b508      	push	{r3, lr}
   d452e:	4b02      	ldr	r3, [pc, #8]	; (d4538 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4530:	681b      	ldr	r3, [r3, #0]
   d4532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4534:	9301      	str	r3, [sp, #4]
   d4536:	bd08      	pop	{r3, pc}
   d4538:	00030244 	.word	0x00030244

000d453c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d453c:	b508      	push	{r3, lr}
   d453e:	4b02      	ldr	r3, [pc, #8]	; (d4548 <network_connect+0xc>)
   d4540:	681b      	ldr	r3, [r3, #0]
   d4542:	685b      	ldr	r3, [r3, #4]
   d4544:	9301      	str	r3, [sp, #4]
   d4546:	bd08      	pop	{r3, pc}
   d4548:	00030240 	.word	0x00030240

000d454c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d454c:	b508      	push	{r3, lr}
   d454e:	4b02      	ldr	r3, [pc, #8]	; (d4558 <network_connecting+0xc>)
   d4550:	681b      	ldr	r3, [r3, #0]
   d4552:	689b      	ldr	r3, [r3, #8]
   d4554:	9301      	str	r3, [sp, #4]
   d4556:	bd08      	pop	{r3, pc}
   d4558:	00030240 	.word	0x00030240

000d455c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d455c:	b508      	push	{r3, lr}
   d455e:	4b02      	ldr	r3, [pc, #8]	; (d4568 <network_disconnect+0xc>)
   d4560:	681b      	ldr	r3, [r3, #0]
   d4562:	68db      	ldr	r3, [r3, #12]
   d4564:	9301      	str	r3, [sp, #4]
   d4566:	bd08      	pop	{r3, pc}
   d4568:	00030240 	.word	0x00030240

000d456c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d456c:	b508      	push	{r3, lr}
   d456e:	4b02      	ldr	r3, [pc, #8]	; (d4578 <network_ready+0xc>)
   d4570:	681b      	ldr	r3, [r3, #0]
   d4572:	691b      	ldr	r3, [r3, #16]
   d4574:	9301      	str	r3, [sp, #4]
   d4576:	bd08      	pop	{r3, pc}
   d4578:	00030240 	.word	0x00030240

000d457c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d457c:	b508      	push	{r3, lr}
   d457e:	4b02      	ldr	r3, [pc, #8]	; (d4588 <network_on+0xc>)
   d4580:	681b      	ldr	r3, [r3, #0]
   d4582:	695b      	ldr	r3, [r3, #20]
   d4584:	9301      	str	r3, [sp, #4]
   d4586:	bd08      	pop	{r3, pc}
   d4588:	00030240 	.word	0x00030240

000d458c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d458c:	b508      	push	{r3, lr}
   d458e:	4b02      	ldr	r3, [pc, #8]	; (d4598 <network_off+0xc>)
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	699b      	ldr	r3, [r3, #24]
   d4594:	9301      	str	r3, [sp, #4]
   d4596:	bd08      	pop	{r3, pc}
   d4598:	00030240 	.word	0x00030240

000d459c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d459c:	b508      	push	{r3, lr}
   d459e:	4b02      	ldr	r3, [pc, #8]	; (d45a8 <network_listen+0xc>)
   d45a0:	681b      	ldr	r3, [r3, #0]
   d45a2:	69db      	ldr	r3, [r3, #28]
   d45a4:	9301      	str	r3, [sp, #4]
   d45a6:	bd08      	pop	{r3, pc}
   d45a8:	00030240 	.word	0x00030240

000d45ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d45ac:	b508      	push	{r3, lr}
   d45ae:	4b02      	ldr	r3, [pc, #8]	; (d45b8 <network_listening+0xc>)
   d45b0:	681b      	ldr	r3, [r3, #0]
   d45b2:	6a1b      	ldr	r3, [r3, #32]
   d45b4:	9301      	str	r3, [sp, #4]
   d45b6:	bd08      	pop	{r3, pc}
   d45b8:	00030240 	.word	0x00030240

000d45bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d45bc:	b508      	push	{r3, lr}
   d45be:	4b02      	ldr	r3, [pc, #8]	; (d45c8 <network_set_listen_timeout+0xc>)
   d45c0:	681b      	ldr	r3, [r3, #0]
   d45c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45c4:	9301      	str	r3, [sp, #4]
   d45c6:	bd08      	pop	{r3, pc}
   d45c8:	00030240 	.word	0x00030240

000d45cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b02      	ldr	r3, [pc, #8]	; (d45d8 <network_get_listen_timeout+0xc>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d45d4:	9301      	str	r3, [sp, #4]
   d45d6:	bd08      	pop	{r3, pc}
   d45d8:	00030240 	.word	0x00030240

000d45dc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d45dc:	b508      	push	{r3, lr}
   d45de:	4b02      	ldr	r3, [pc, #8]	; (d45e8 <malloc+0xc>)
   d45e0:	681b      	ldr	r3, [r3, #0]
   d45e2:	681b      	ldr	r3, [r3, #0]
   d45e4:	9301      	str	r3, [sp, #4]
   d45e6:	bd08      	pop	{r3, pc}
   d45e8:	0003021c 	.word	0x0003021c

000d45ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d45ec:	b508      	push	{r3, lr}
   d45ee:	4b02      	ldr	r3, [pc, #8]	; (d45f8 <free+0xc>)
   d45f0:	681b      	ldr	r3, [r3, #0]
   d45f2:	685b      	ldr	r3, [r3, #4]
   d45f4:	9301      	str	r3, [sp, #4]
   d45f6:	bd08      	pop	{r3, pc}
   d45f8:	0003021c 	.word	0x0003021c

000d45fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d45fc:	b508      	push	{r3, lr}
   d45fe:	4b02      	ldr	r3, [pc, #8]	; (d4608 <realloc+0xc>)
   d4600:	681b      	ldr	r3, [r3, #0]
   d4602:	689b      	ldr	r3, [r3, #8]
   d4604:	9301      	str	r3, [sp, #4]
   d4606:	bd08      	pop	{r3, pc}
   d4608:	0003021c 	.word	0x0003021c

000d460c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d460c:	2100      	movs	r1, #0
   d460e:	f7ff bf71 	b.w	d44f4 <system_delay_ms>

000d4612 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4612:	4770      	bx	lr

000d4614 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4614:	2000      	movs	r0, #0
   d4616:	4770      	bx	lr

000d4618 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4618:	4770      	bx	lr

000d461a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d461a:	2000      	movs	r0, #0
   d461c:	4770      	bx	lr

000d461e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d461e:	4770      	bx	lr

000d4620 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4620:	2000      	movs	r0, #0
   d4622:	4770      	bx	lr

000d4624 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4624:	b510      	push	{r4, lr}
   d4626:	2114      	movs	r1, #20
   d4628:	4604      	mov	r4, r0
   d462a:	f001 fdde 	bl	d61ea <_ZdlPvj>
   d462e:	4620      	mov	r0, r4
   d4630:	bd10      	pop	{r4, pc}

000d4632 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4632:	b510      	push	{r4, lr}
   d4634:	2114      	movs	r1, #20
   d4636:	4604      	mov	r4, r0
   d4638:	f001 fdd7 	bl	d61ea <_ZdlPvj>
   d463c:	4620      	mov	r0, r4
   d463e:	bd10      	pop	{r4, pc}

000d4640 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4640:	b510      	push	{r4, lr}
   d4642:	2114      	movs	r1, #20
   d4644:	4604      	mov	r4, r0
   d4646:	f001 fdd0 	bl	d61ea <_ZdlPvj>
   d464a:	4620      	mov	r0, r4
   d464c:	bd10      	pop	{r4, pc}

000d464e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d464e:	f7ff bd24 	b.w	d409a <_ZdlPv>

000d4652 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4652:	f7ff bd22 	b.w	d409a <_ZdlPv>

000d4656 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4656:	f7ff bd20 	b.w	d409a <_ZdlPv>

000d465a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d465a:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d465c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d465e:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4660:	689b      	ldr	r3, [r3, #8]
   d4662:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4664:	68a3      	ldr	r3, [r4, #8]
   d4666:	3b01      	subs	r3, #1
   d4668:	60a3      	str	r3, [r4, #8]
   d466a:	b92b      	cbnz	r3, d4678 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105+0x1e>
            _M_destroy();
   d466c:	6823      	ldr	r3, [r4, #0]
   d466e:	4620      	mov	r0, r4
   d4670:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4676:	4718      	bx	r3
   d4678:	bd10      	pop	{r4, pc}

000d467a <_ZNK8particle10BleAddresseqERKS0_>:
            return 0;
        }
        return addr[i];
    }

    bool operator==(const BleAddress& addr) const {
   d467a:	b508      	push	{r3, lr}
        if (this->addr_type == addr.addr_type && !memcmp(this->addr, addr.addr, BLE_SIG_ADDR_LEN)) {
   d467c:	7982      	ldrb	r2, [r0, #6]
   d467e:	798b      	ldrb	r3, [r1, #6]
   d4680:	429a      	cmp	r2, r3
   d4682:	d106      	bne.n	d4692 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4684:	2206      	movs	r2, #6
   d4686:	f001 ff09 	bl	d649c <memcmp>
   d468a:	fab0 f080 	clz	r0, r0
   d468e:	0940      	lsrs	r0, r0, #5
   d4690:	bd08      	pop	{r3, pc}
            return true;
        }
        return false;
   d4692:	2000      	movs	r0, #0
    }
   d4694:	bd08      	pop	{r3, pc}

000d4696 <_ZN8particle7BleUuidC1Ev>:
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d4696:	b510      	push	{r4, lr}
            : uuid_() {
   d4698:	2214      	movs	r2, #20
static_assert(std::is_pod<BleCharacteristicHandles>::value, "BleCharacteristicHandles is not a POD struct");


class BleUuid {
public:
    BleUuid()
   d469a:	4604      	mov	r4, r0
            : uuid_() {
   d469c:	2100      	movs	r1, #0
   d469e:	f001 ff32 	bl	d6506 <memset>
    }
   d46a2:	4620      	mov	r0, r4
   d46a4:	bd10      	pop	{r4, pc}
	...

000d46a8 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d46a8:	b510      	push	{r4, lr}
            locked_(false) {
   d46aa:	2300      	movs	r3, #0
   d46ac:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d46ae:	4b04      	ldr	r3, [pc, #16]	; (d46c0 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d46b0:	4604      	mov	r4, r0
   d46b2:	6818      	ldr	r0, [r3, #0]
   d46b4:	f7ff fdf6 	bl	d42a4 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d46b8:	2301      	movs	r3, #1
   d46ba:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d46bc:	4620      	mov	r0, r4
   d46be:	bd10      	pop	{r4, pc}
   d46c0:	2003e3d4 	.word	0x2003e3d4

000d46c4 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d46c4:	b510      	push	{r4, lr}
        if (locked_) {
   d46c6:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d46c8:	4604      	mov	r4, r0
        if (locked_) {
   d46ca:	b11b      	cbz	r3, d46d4 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d46cc:	4b02      	ldr	r3, [pc, #8]	; (d46d8 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d46ce:	6818      	ldr	r0, [r3, #0]
   d46d0:	f7ff fdf0 	bl	d42b4 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d46d4:	4620      	mov	r0, r4
   d46d6:	bd10      	pop	{r4, pc}
   d46d8:	2003e3d4 	.word	0x2003e3d4

000d46dc <_ZN8particle7BleUuidC1ERKS0_>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid(const BleUuid& uuid)
   d46dc:	b510      	push	{r4, lr}
        : uuid_(uuid.uuid_) {
   d46de:	4603      	mov	r3, r0
   d46e0:	f101 0214 	add.w	r2, r1, #20
   d46e4:	f851 4b04 	ldr.w	r4, [r1], #4
   d46e8:	f843 4b04 	str.w	r4, [r3], #4
   d46ec:	4291      	cmp	r1, r2
   d46ee:	d1f9      	bne.n	d46e4 <_ZN8particle7BleUuidC1ERKS0_+0x8>
}
   d46f0:	bd10      	pop	{r4, pc}

000d46f2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
   d46f2:	b570      	push	{r4, r5, r6, lr}
   d46f4:	460c      	mov	r4, r1
   d46f6:	4605      	mov	r5, r0
   d46f8:	4616      	mov	r6, r2
        : BleUuid() {
   d46fa:	f7ff ffcc 	bl	d4696 <_ZN8particle7BleUuidC1Ev>
    if (uuid128 == nullptr) {
   d46fe:	b92c      	cbnz	r4, d470c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1a>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4700:	2210      	movs	r2, #16
   d4702:	4621      	mov	r1, r4
   d4704:	4628      	mov	r0, r5
   d4706:	f001 fefe 	bl	d6506 <memset>
   d470a:	e016      	b.n	d473a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x48>
    } else {
        if (order == BleUuidOrder::LSB) {
   d470c:	2e01      	cmp	r6, #1
   d470e:	d109      	bne.n	d4724 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4710:	462b      	mov	r3, r5
   d4712:	f104 0210 	add.w	r2, r4, #16
   d4716:	f854 1b04 	ldr.w	r1, [r4], #4
   d471a:	f843 1b04 	str.w	r1, [r3], #4
   d471e:	4294      	cmp	r4, r2
   d4720:	d1f9      	bne.n	d4716 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
   d4722:	e008      	b.n	d4736 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x44>
   d4724:	1e6a      	subs	r2, r5, #1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order)
        : BleUuid() {
    if (uuid128 == nullptr) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
   d4726:	230f      	movs	r3, #15
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid_.uuid128[i] = uuid128[j];
   d4728:	5ce1      	ldrb	r1, [r4, r3]
   d472a:	f802 1f01 	strb.w	r1, [r2, #1]!
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid_.uuid128, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d472e:	3b01      	subs	r3, #1
   d4730:	b2db      	uxtb	r3, r3
   d4732:	2bff      	cmp	r3, #255	; 0xff
   d4734:	d1f8      	bne.n	d4728 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
                uuid_.uuid128[i] = uuid128[j];
            }
        }
        uuid_.type = BLE_UUID_TYPE_128BIT;
   d4736:	2301      	movs	r3, #1
   d4738:	742b      	strb	r3, [r5, #16]
    }
}
   d473a:	4628      	mov	r0, r5
   d473c:	bd70      	pop	{r4, r5, r6, pc}

000d473e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
        : BleUuid() {
    uuid_.uuid16 = uuid16;
    uuid_.type = BLE_UUID_TYPE_16BIT;
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d473e:	b538      	push	{r3, r4, r5, lr}
   d4740:	4604      	mov	r4, r0
   d4742:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d4744:	461a      	mov	r2, r3
   d4746:	f7ff ffd4 	bl	d46f2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
   d474a:	7325      	strb	r5, [r4, #12]
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d474c:	2301      	movs	r3, #1
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
        : BleUuid(uuid128, order) {
    uuid_.uuid128[12] = (uint8_t)(uuid16 & 0x00FF);
    uuid_.uuid128[13] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d474e:	0a2d      	lsrs	r5, r5, #8
   d4750:	7365      	strb	r5, [r4, #13]
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4752:	7423      	strb	r3, [r4, #16]
}
   d4754:	4620      	mov	r0, r4
   d4756:	bd38      	pop	{r3, r4, r5, pc}

000d4758 <_ZN8particle7BleUuidC1EPKc>:

BleUuid::BleUuid(const char* uuid)
   d4758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d475c:	4688      	mov	r8, r1
   d475e:	4607      	mov	r7, r0
        : BleUuid() {
   d4760:	f7ff ff99 	bl	d4696 <_ZN8particle7BleUuidC1Ev>
    if (uuid == nullptr) {
   d4764:	f1b8 0f00 	cmp.w	r8, #0
   d4768:	d002      	beq.n	d4770 <_ZN8particle7BleUuidC1EPKc+0x18>
   d476a:	2600      	movs	r6, #0
   d476c:	2510      	movs	r5, #16
   d476e:	e00f      	b.n	d4790 <_ZN8particle7BleUuidC1EPKc+0x38>
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4770:	2210      	movs	r2, #16
   d4772:	4641      	mov	r1, r8
   d4774:	4638      	mov	r0, r7
   d4776:	f001 fec6 	bl	d6506 <memset>
   d477a:	e04a      	b.n	d4812 <_ZN8particle7BleUuidC1EPKc+0xba>
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
            int8_t hi = hexToNibble(uuid[i]);
   d477c:	f818 3006 	ldrb.w	r3, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4780:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d4784:	b2d1      	uxtb	r1, r2
   d4786:	2909      	cmp	r1, #9
   d4788:	d808      	bhi.n	d479c <_ZN8particle7BleUuidC1EPKc+0x44>
            if (hi >= 0) {
   d478a:	1c53      	adds	r3, r2, #1
   d478c:	d114      	bne.n	d47b8 <_ZN8particle7BleUuidC1EPKc+0x60>
        : BleUuid() {
    if (uuid == nullptr) {
        memset(uuid_.uuid128, 0x00, BLE_SIG_UUID_128BIT_LEN);
    } else {
        size_t len = BLE_SIG_UUID_128BIT_LEN;
        for (size_t i = 0; i < strlen(uuid); i++) {
   d478e:	3601      	adds	r6, #1
   d4790:	4640      	mov	r0, r8
   d4792:	f001 fee9 	bl	d6568 <strlen>
   d4796:	4286      	cmp	r6, r0
   d4798:	d3f0      	bcc.n	d477c <_ZN8particle7BleUuidC1EPKc+0x24>
   d479a:	e033      	b.n	d4804 <_ZN8particle7BleUuidC1EPKc+0xac>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d479c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
   d47a0:	2a05      	cmp	r2, #5
   d47a2:	d802      	bhi.n	d47aa <_ZN8particle7BleUuidC1EPKc+0x52>
        return (c - 'a' + 0x0a);
   d47a4:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d47a8:	e7ef      	b.n	d478a <_ZN8particle7BleUuidC1EPKc+0x32>
    } else if (c >= 'A' && c <= 'F') {
   d47aa:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   d47ae:	2a05      	cmp	r2, #5
   d47b0:	d8ed      	bhi.n	d478e <_ZN8particle7BleUuidC1EPKc+0x36>
        return (c - 'A' + 0x0a);
   d47b2:	f1a3 0237 	sub.w	r2, r3, #55	; 0x37
   d47b6:	e7e8      	b.n	d478a <_ZN8particle7BleUuidC1EPKc+0x32>
            int8_t hi = hexToNibble(uuid[i]);
            if (hi >= 0) {
                uuid_.uuid128[len - 1] = hi << 4;
   d47b8:	0112      	lsls	r2, r2, #4
   d47ba:	3d01      	subs	r5, #1
   d47bc:	b2d4      	uxtb	r4, r2
   d47be:	557c      	strb	r4, [r7, r5]
                if (++i < strlen(uuid)) {
   d47c0:	4640      	mov	r0, r8
   d47c2:	f001 fed1 	bl	d6568 <strlen>
   d47c6:	3601      	adds	r6, #1
   d47c8:	4286      	cmp	r6, r0
   d47ca:	d2e0      	bcs.n	d478e <_ZN8particle7BleUuidC1EPKc+0x36>
                    int8_t lo = hexToNibble(uuid[i]);
   d47cc:	f818 2006 	ldrb.w	r2, [r8, r6]
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d47d0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   d47d4:	b2d9      	uxtb	r1, r3
   d47d6:	2909      	cmp	r1, #9
   d47d8:	d90e      	bls.n	d47f8 <_ZN8particle7BleUuidC1EPKc+0xa0>
        return (c - '0');
    } else if (c >= 'a' && c <= 'f') {
   d47da:	f1a2 0361 	sub.w	r3, r2, #97	; 0x61
   d47de:	2b05      	cmp	r3, #5
   d47e0:	d802      	bhi.n	d47e8 <_ZN8particle7BleUuidC1EPKc+0x90>
        return (c - 'a' + 0x0a);
   d47e2:	f1a2 0357 	sub.w	r3, r2, #87	; 0x57
   d47e6:	e007      	b.n	d47f8 <_ZN8particle7BleUuidC1EPKc+0xa0>
    } else if (c >= 'A' && c <= 'F') {
   d47e8:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
   d47ec:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d47ee:	bf94      	ite	ls
   d47f0:	f1a2 0337 	subls.w	r3, r2, #55	; 0x37
    }
    return -1;
   d47f4:	f04f 33ff 	movhi.w	r3, #4294967295	; 0xffffffff
   d47f8:	b25a      	sxtb	r2, r3
                    if (lo >= 0) {
   d47fa:	3301      	adds	r3, #1
                        uuid_.uuid128[len - 1] |= lo;
   d47fc:	bf1c      	itt	ne
   d47fe:	4314      	orrne	r4, r2
   d4800:	557c      	strbne	r4, [r7, r5]
   d4802:	e7c4      	b.n	d478e <_ZN8particle7BleUuidC1EPKc+0x36>
   d4804:	197b      	adds	r3, r7, r5
                }
                len--;
            }
        }
        while (len > 0) {
            uuid_.uuid128[len - 1] = 0x00;
   d4806:	2200      	movs	r2, #0
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d4808:	42bb      	cmp	r3, r7
   d480a:	d002      	beq.n	d4812 <_ZN8particle7BleUuidC1EPKc+0xba>
            uuid_.uuid128[len - 1] = 0x00;
   d480c:	f803 2d01 	strb.w	r2, [r3, #-1]!
                    }
                }
                len--;
            }
        }
        while (len > 0) {
   d4810:	e7fa      	b.n	d4808 <_ZN8particle7BleUuidC1EPKc+0xb0>
            uuid_.uuid128[len - 1] = 0x00;
            len--;
        }
    }
    uuid_.type = BLE_UUID_TYPE_128BIT;
   d4812:	2301      	movs	r3, #1
   d4814:	743b      	strb	r3, [r7, #16]
}
   d4816:	4638      	mov	r0, r7
   d4818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d481c <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d481c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    ~BleUuid() = default;

    bool isValid() const;

    BleUuidType type() const {
        if (uuid_.type == BLE_UUID_TYPE_16BIT || uuid_.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d481e:	7c03      	ldrb	r3, [r0, #16]
   d4820:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d4824:	4604      	mov	r4, r0
   d4826:	d00a      	beq.n	d483e <_ZNK8particle7BleUuid7isValidEv+0x22>
    if (type() == BleUuidType::SHORT) {
        return uuid_.uuid16 != 0x0000;
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
   d4828:	2210      	movs	r2, #16
   d482a:	2100      	movs	r1, #0
   d482c:	4668      	mov	r0, sp
   d482e:	f001 fe6a 	bl	d6506 <memset>
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
   d4832:	2210      	movs	r2, #16
   d4834:	4669      	mov	r1, sp
   d4836:	4620      	mov	r0, r4
   d4838:	f001 fe30 	bl	d649c <memcmp>
   d483c:	e000      	b.n	d4840 <_ZNK8particle7BleUuid7isValidEv+0x24>
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
    if (type() == BleUuidType::SHORT) {
        return uuid_.uuid16 != 0x0000;
   d483e:	8800      	ldrh	r0, [r0, #0]
   d4840:	3000      	adds	r0, #0
   d4842:	bf18      	it	ne
   d4844:	2001      	movne	r0, #1
    } else {
        uint8_t temp[BLE_SIG_UUID_128BIT_LEN] = {};
        return memcmp(uuid_.uuid128, temp, BLE_SIG_UUID_128BIT_LEN);
    }
}
   d4846:	b004      	add	sp, #16
   d4848:	bd10      	pop	{r4, pc}

000d484a <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d484a:	b510      	push	{r4, lr}
   d484c:	7c04      	ldrb	r4, [r0, #16]
   d484e:	f014 0ffd 	tst.w	r4, #253	; 0xfd
   d4852:	d006      	beq.n	d4862 <_ZNK8particle7BleUuideqERKS0_+0x18>
    if (type() == BleUuidType::SHORT) {
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4854:	2210      	movs	r2, #16
   d4856:	f001 fe21 	bl	d649c <memcmp>
   d485a:	fab0 f080 	clz	r0, r0
   d485e:	0940      	lsrs	r0, r0, #5
   d4860:	bd10      	pop	{r4, pc}
    }
}

bool BleUuid::operator==(const BleUuid& uuid) const {
    if (type() == BleUuidType::SHORT) {
        return (uuid_.uuid16 == uuid.uuid_.uuid16);
   d4862:	8803      	ldrh	r3, [r0, #0]
   d4864:	8808      	ldrh	r0, [r1, #0]
   d4866:	1a1b      	subs	r3, r3, r0
   d4868:	4258      	negs	r0, r3
   d486a:	4158      	adcs	r0, r3
    } else {
        return !memcmp(uuid_.uuid128, uuid.uuid_.uuid128, BLE_SIG_UUID_128BIT_LEN);
    }
}
   d486c:	bd10      	pop	{r4, pc}

000d486e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d486e:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4870:	b18b      	cbz	r3, d4896 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4872:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4874:	1ce5      	adds	r5, r4, #3
   d4876:	428d      	cmp	r5, r1
   d4878:	d80f      	bhi.n	d489a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d487a:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d487c:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d487e:	5d87      	ldrb	r7, [r0, r6]
   d4880:	4297      	cmp	r7, r2
   d4882:	d105      	bne.n	d4890 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d4884:	442e      	add	r6, r5
   d4886:	42b1      	cmp	r1, r6
   d4888:	d307      	bcc.n	d489a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d488a:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d488c:	1c68      	adds	r0, r5, #1
                return adsLen;
   d488e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d4890:	3501      	adds	r5, #1
   d4892:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4894:	e7ee      	b.n	d4874 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d4896:	4618      	mov	r0, r3
   d4898:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d489a:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d489c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d489e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d489e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d48a2:	4604      	mov	r4, r0
   d48a4:	460e      	mov	r6, r1
   d48a6:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d48a8:	4617      	mov	r7, r2
   d48aa:	2a00      	cmp	r2, #0
   d48ac:	d03a      	beq.n	d4924 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d48ae:	460a      	mov	r2, r1
   d48b0:	ab01      	add	r3, sp, #4
   d48b2:	6a01      	ldr	r1, [r0, #32]
   d48b4:	f7ff ffdb 	bl	d486e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d48b8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d48bc:	6a22      	ldr	r2, [r4, #32]
   d48be:	bb03      	cbnz	r3, d4902 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d48c0:	b1f8      	cbz	r0, d4902 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d48c2:	1c96      	adds	r6, r2, #2
   d48c4:	442e      	add	r6, r5
   d48c6:	1a36      	subs	r6, r6, r0
   d48c8:	2e1f      	cmp	r6, #31
   d48ca:	d82b      	bhi.n	d4924 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d48cc:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d48d0:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d48d4:	ebc8 0202 	rsb	r2, r8, r2
   d48d8:	1a12      	subs	r2, r2, r0
   d48da:	eb00 0108 	add.w	r1, r0, r8
   d48de:	eb05 0009 	add.w	r0, r5, r9
   d48e2:	b292      	uxth	r2, r2
   d48e4:	4421      	add	r1, r4
   d48e6:	4420      	add	r0, r4
   d48e8:	f001 fdf2 	bl	d64d0 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d48ec:	1c6b      	adds	r3, r5, #1
   d48ee:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d48f2:	462a      	mov	r2, r5
   d48f4:	4639      	mov	r1, r7
   d48f6:	eb04 0009 	add.w	r0, r4, r9
   d48fa:	f001 fdde 	bl	d64ba <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d48fe:	6226      	str	r6, [r4, #32]
   d4900:	e010      	b.n	d4924 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d4902:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d4904:	182b      	adds	r3, r5, r0
   d4906:	2b1f      	cmp	r3, #31
   d4908:	d80c      	bhi.n	d4924 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d490a:	1c6b      	adds	r3, r5, #1
   d490c:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d490e:	4422      	add	r2, r4
   d4910:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d4912:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d4914:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d4916:	4420      	add	r0, r4
   d4918:	462a      	mov	r2, r5
   d491a:	f001 fdce 	bl	d64ba <memcpy>
        selfLen_ += len;
   d491e:	6a22      	ldr	r2, [r4, #32]
   d4920:	442a      	add	r2, r5
   d4922:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d4924:	6a20      	ldr	r0, [r4, #32]
}
   d4926:	b003      	add	sp, #12
   d4928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d492c <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d492c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d492e:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d4930:	4603      	mov	r3, r0
   d4932:	f100 021f 	add.w	r2, r0, #31
   d4936:	2000      	movs	r0, #0
   d4938:	f803 0b01 	strb.w	r0, [r3], #1
   d493c:	4293      	cmp	r3, r2
   d493e:	f04f 0100 	mov.w	r1, #0
   d4942:	d1f9      	bne.n	d4938 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d4944:	aa04      	add	r2, sp, #16
   d4946:	2306      	movs	r3, #6
   d4948:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d494c:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d494e:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d4950:	9100      	str	r1, [sp, #0]
   d4952:	4620      	mov	r0, r4
   d4954:	4619      	mov	r1, r3
   d4956:	f7ff ffa2 	bl	d489e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d495a:	4620      	mov	r0, r4
   d495c:	b004      	add	sp, #16
   d495e:	bd10      	pop	{r4, pc}

000d4960 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4960:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4962:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d4964:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d4966:	ab01      	add	r3, sp, #4
   d4968:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d496a:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d496c:	f7ff ff7f 	bl	d486e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d4970:	4605      	mov	r5, r0
   d4972:	b178      	cbz	r0, d4994 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d4974:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d4976:	6a22      	ldr	r2, [r4, #32]
   d4978:	1829      	adds	r1, r5, r0
   d497a:	1a12      	subs	r2, r2, r0
   d497c:	1b52      	subs	r2, r2, r5
   d497e:	4421      	add	r1, r4
   d4980:	4420      	add	r0, r4
   d4982:	f001 fd9a 	bl	d64ba <memcpy>
        selfLen_ -= len;
   d4986:	6a23      	ldr	r3, [r4, #32]
   d4988:	1b5d      	subs	r5, r3, r5
   d498a:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d498c:	4631      	mov	r1, r6
   d498e:	4620      	mov	r0, r4
   d4990:	f7ff ffe6 	bl	d4960 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d4994:	b002      	add	sp, #8
   d4996:	bd70      	pop	{r4, r5, r6, pc}

000d4998 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d4998:	b538      	push	{r3, r4, r5, lr}
              isLocal(true),
              dataCb(nullptr),
              context(nullptr),
              connHandle(BLE_INVALID_CONN_HANDLE),
              svcImpl(nullptr),
              valid_(false) {
   d499a:	2500      	movs	r5, #0
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d499c:	4604      	mov	r4, r0
              isLocal(true),
              dataCb(nullptr),
              context(nullptr),
              connHandle(BLE_INVALID_CONN_HANDLE),
              svcImpl(nullptr),
              valid_(false) {
   d499e:	f800 5b02 	strb.w	r5, [r0], #2
   d49a2:	f7ff fe78 	bl	d4696 <_ZN8particle7BleUuidC1Ev>
   d49a6:	f104 0016 	add.w	r0, r4, #22
   d49aa:	f7ff fe74 	bl	d4696 <_ZN8particle7BleUuidC1Ev>
   d49ae:	4909      	ldr	r1, [pc, #36]	; (d49d4 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d49b0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d49b4:	f001 f9d2 	bl	d5d5c <_ZN6StringC1EPK19__FlashStringHelper>
   d49b8:	2301      	movs	r3, #1
   d49ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   d49be:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d49c2:	64e5      	str	r5, [r4, #76]	; 0x4c
   d49c4:	6525      	str	r5, [r4, #80]	; 0x50
   d49c6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
   d49ca:	65a5      	str	r5, [r4, #88]	; 0x58
   d49cc:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    }
   d49d0:	4620      	mov	r0, r4
   d49d2:	bd38      	pop	{r3, r4, r5, pc}
   d49d4:	000d67b2 	.word	0x000d67b2

000d49d8 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>:
    }

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
   d49d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d49dc:	e890 0050 	ldmia.w	r0, {r4, r6}
   d49e0:	460d      	mov	r5, r1
   d49e2:	4617      	mov	r7, r2
   d49e4:	4698      	mov	r8, r3
   d49e6:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d49ea:	42a6      	cmp	r6, r4
   d49ec:	d033      	beq.n	d4a56 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x7e>
   d49ee:	6823      	ldr	r3, [r4, #0]
   d49f0:	699a      	ldr	r2, [r3, #24]
   d49f2:	69d9      	ldr	r1, [r3, #28]
   d49f4:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
        }
        return nullptr;
    }

    BleCharacteristic* getCharacteristic(BleAttributeHandle attrHandle) {
        for (auto& characteristic : characteristics_) {
   d49f8:	4291      	cmp	r1, r2
   d49fa:	d01b      	beq.n	d4a34 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d49fc:	6813      	ldr	r3, [r2, #0]
            BleCharacteristicImpl* charImpl = characteristic.impl();
            if (charImpl != nullptr) {
   d49fe:	b19b      	cbz	r3, d4a28 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x50>
                if (   charImpl->attrHandles.decl_handle == attrHandle
   d4a00:	f8b3 0042 	ldrh.w	r0, [r3, #66]	; 0x42
   d4a04:	42a8      	cmp	r0, r5
   d4a06:	d011      	beq.n	d4a2c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.value_handle == attrHandle
   d4a08:	f8b3 0044 	ldrh.w	r0, [r3, #68]	; 0x44
   d4a0c:	42a8      	cmp	r0, r5
   d4a0e:	d00d      	beq.n	d4a2c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.user_desc_handle == attrHandle
   d4a10:	f8b3 0046 	ldrh.w	r0, [r3, #70]	; 0x46
   d4a14:	42a8      	cmp	r0, r5
   d4a16:	d009      	beq.n	d4a2c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.cccd_handle == attrHandle
   d4a18:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
   d4a1c:	42a8      	cmp	r0, r5
   d4a1e:	d005      	beq.n	d4a2c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
                    || charImpl->attrHandles.sccd_handle == attrHandle) {
   d4a20:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
   d4a24:	42a8      	cmp	r0, r5
   d4a26:	d001      	beq.n	d4a2c <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x54>
   d4a28:	3208      	adds	r2, #8
   d4a2a:	e7e5      	b.n	d49f8 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x20>
    void setValid(bool valid) {
        valid_ = valid;
    }

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
   d4a2c:	b117      	cbz	r7, d4a34 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4a2e:	f1b8 0f00 	cmp.w	r8, #0
   d4a32:	d101      	bne.n	d4a38 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x60>
   d4a34:	3408      	adds	r4, #8

    void gattsProcessDisconnected(const BlePeerDevice& peer) {
    }

    void gattsProcessDataWritten(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        for (auto& service : services_) {
   d4a36:	e7d8      	b.n	d49ea <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x12>

    void processReceivedData(BleAttributeHandle attrHandle, const uint8_t* data, size_t len, const BlePeerDevice& peer) {
        if (data == nullptr || len == 0) {
            return;
        }
        if (dataCb && attrHandle == attrHandles.value_handle) {
   d4a38:	f8d3 904c 	ldr.w	r9, [r3, #76]	; 0x4c
   d4a3c:	f1b9 0f00 	cmp.w	r9, #0
   d4a40:	d0f8      	beq.n	d4a34 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4a42:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   d4a46:	42aa      	cmp	r2, r5
   d4a48:	d1f4      	bne.n	d4a34 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
            dataCb(data, len, peer, context);
   d4a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4a4c:	9a08      	ldr	r2, [sp, #32]
   d4a4e:	4641      	mov	r1, r8
   d4a50:	4638      	mov	r0, r7
   d4a52:	47c8      	blx	r9
   d4a54:	e7ee      	b.n	d4a34 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE+0x5c>
   d4a56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d4a5a <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>:
            }
        }
    }

private:
    BleService* getService(const BleUuid& uuid) {
   d4a5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a5c:	e890 0050 	ldmia.w	r0, {r4, r6}
   d4a60:	460f      	mov	r7, r1
   d4a62:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
        for (auto& service : services_) {
   d4a66:	42b4      	cmp	r4, r6
   d4a68:	4625      	mov	r5, r4
   d4a6a:	d008      	beq.n	d4a7e <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE+0x24>
            if (service.impl()->uuid == uuid) {
   d4a6c:	4639      	mov	r1, r7
   d4a6e:	f854 0b08 	ldr.w	r0, [r4], #8
   d4a72:	f7ff feea 	bl	d484a <_ZNK8particle7BleUuideqERKS0_>
   d4a76:	2800      	cmp	r0, #0
   d4a78:	d0f5      	beq.n	d4a66 <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE+0xc>
   d4a7a:	4628      	mov	r0, r5
   d4a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                return &service;
            }
        }
        return nullptr;
   d4a7e:	2000      	movs	r0, #0
    }
   d4a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a82 <_ZN8particle13BlePeerDeviceeqERKS0_>:

const BleAddress& BlePeerDevice::address() const {
    return impl()->address;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) {
   d4a82:	b508      	push	{r3, lr}
   d4a84:	6800      	ldr	r0, [r0, #0]
   d4a86:	6809      	ldr	r1, [r1, #0]
    if (impl()->connHandle == device.impl()->connHandle && impl()->address == device.impl()->address) {
   d4a88:	8ac2      	ldrh	r2, [r0, #22]
   d4a8a:	8acb      	ldrh	r3, [r1, #22]
   d4a8c:	429a      	cmp	r2, r3
   d4a8e:	d104      	bne.n	d4a9a <_ZN8particle13BlePeerDeviceeqERKS0_+0x18>
   d4a90:	3101      	adds	r1, #1
   d4a92:	3001      	adds	r0, #1
   d4a94:	f7ff fdf1 	bl	d467a <_ZNK8particle10BleAddresseqERKS0_>
   d4a98:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4a9a:	2000      	movs	r0, #0
}
   d4a9c:	bd08      	pop	{r3, pc}

000d4a9e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d4a9e:	4608      	mov	r0, r1
   d4aa0:	b909      	cbnz	r1, d4aa6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d4aa2:	460a      	mov	r2, r1
   d4aa4:	e001      	b.n	d4aaa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d4aa6:	6a09      	ldr	r1, [r1, #32]
   d4aa8:	2200      	movs	r2, #0
   d4aaa:	f7ff bba7 	b.w	d41fc <hal_ble_gap_set_advertising_data>

000d4aae <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d4aae:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d4ab0:	460c      	mov	r4, r1
   d4ab2:	b911      	cbnz	r1, d4aba <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d4ab4:	460a      	mov	r2, r1
   d4ab6:	4608      	mov	r0, r1
   d4ab8:	e006      	b.n	d4ac8 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d4aba:	2101      	movs	r1, #1
   d4abc:	4620      	mov	r0, r4
   d4abe:	f7ff ff4f 	bl	d4960 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4ac2:	6a21      	ldr	r1, [r4, #32]
   d4ac4:	2200      	movs	r2, #0
   d4ac6:	4620      	mov	r0, r4
    }
}
   d4ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d4acc:	f7ff bb9e 	b.w	d420c <hal_ble_gap_set_scan_response_data>

000d4ad0 <_ZNK8particle14BleLocalDevice9advertiseEv>:
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
   d4ad0:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d4ad2:	a801      	add	r0, sp, #4
   d4ad4:	f7ff fde8 	bl	d46a8 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d4ad8:	2000      	movs	r0, #0
   d4ada:	f7ff fb9f 	bl	d421c <hal_ble_gap_start_advertising>
   d4ade:	4604      	mov	r4, r0
    }
    return hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr);
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d4ae0:	a801      	add	r0, sp, #4
   d4ae2:	f7ff fdef 	bl	d46c4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d4ae6:	4620      	mov	r0, r4
   d4ae8:	b002      	add	sp, #8
   d4aea:	bd10      	pop	{r4, pc}

000d4aec <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d4aec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4aee:	4605      	mov	r5, r0
   d4af0:	460c      	mov	r4, r1
    WiringBleLock lk;
   d4af2:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d4af4:	4616      	mov	r6, r2
    WiringBleLock lk;
   d4af6:	f7ff fdd7 	bl	d46a8 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d4afa:	4621      	mov	r1, r4
   d4afc:	4628      	mov	r0, r5
   d4afe:	f7ff ffce 	bl	d4a9e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d4b02:	2800      	cmp	r0, #0
   d4b04:	db08      	blt.n	d4b18 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d4b06:	4631      	mov	r1, r6
   d4b08:	4628      	mov	r0, r5
   d4b0a:	f7ff ffd0 	bl	d4aae <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d4b0e:	2800      	cmp	r0, #0
   d4b10:	db02      	blt.n	d4b18 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d4b12:	4628      	mov	r0, r5
   d4b14:	f7ff ffdc 	bl	d4ad0 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d4b18:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d4b1a:	a801      	add	r0, sp, #4
   d4b1c:	f7ff fdd2 	bl	d46c4 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d4b20:	4620      	mov	r0, r4
   d4b22:	b002      	add	sp, #8
   d4b24:	bd70      	pop	{r4, r5, r6, pc}

000d4b26 <_ZN8particle14BleLocalDevice14findPeerDeviceEt>:
int BleLocalDevice::addCharacteristic(const String& desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context) const {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

BlePeerDevice* BleLocalDevice::findPeerDevice(BleConnectionHandle connHandle) {
   d4b26:	b530      	push	{r4, r5, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4b28:	6983      	ldr	r3, [r0, #24]
   d4b2a:	e893 0014 	ldmia.w	r3, {r2, r4}
   d4b2e:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
    for (auto& central : peripheralProxy_->centrals()) {
   d4b32:	42a2      	cmp	r2, r4
   d4b34:	4613      	mov	r3, r2
   d4b36:	d007      	beq.n	d4b48 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x22>
        if (central.impl()->connHandle == connHandle) {
   d4b38:	681d      	ldr	r5, [r3, #0]
   d4b3a:	8aed      	ldrh	r5, [r5, #22]
   d4b3c:	428d      	cmp	r5, r1
   d4b3e:	f102 0208 	add.w	r2, r2, #8
   d4b42:	d1f6      	bne.n	d4b32 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0xc>
   d4b44:	4618      	mov	r0, r3
   d4b46:	bd30      	pop	{r4, r5, pc}
   d4b48:	69c2      	ldr	r2, [r0, #28]
   d4b4a:	6813      	ldr	r3, [r2, #0]
   d4b4c:	6852      	ldr	r2, [r2, #4]
   d4b4e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
            return &central;
        }
    }
    for (auto& peripheral : centralProxy_->peripherals()) {
   d4b52:	429a      	cmp	r2, r3
   d4b54:	4618      	mov	r0, r3
   d4b56:	d006      	beq.n	d4b66 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x40>
        if (peripheral.impl()->connHandle == connHandle) {
   d4b58:	6804      	ldr	r4, [r0, #0]
   d4b5a:	8ae4      	ldrh	r4, [r4, #22]
   d4b5c:	428c      	cmp	r4, r1
   d4b5e:	f103 0308 	add.w	r3, r3, #8
   d4b62:	d1f6      	bne.n	d4b52 <_ZN8particle14BleLocalDevice14findPeerDeviceEt+0x2c>
   d4b64:	bd30      	pop	{r4, r5, pc}
            return &peripheral;
        }
    }
    return nullptr;
   d4b66:	2000      	movs	r0, #0
}
   d4b68:	bd30      	pop	{r4, r5, pc}

000d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4b6a:	b510      	push	{r4, lr}
   d4b6c:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d4b6e:	6800      	ldr	r0, [r0, #0]
   d4b70:	b128      	cbz	r0, d4b7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4b72:	6843      	ldr	r3, [r0, #4]
   d4b74:	3b01      	subs	r3, #1
   d4b76:	6043      	str	r3, [r0, #4]
   d4b78:	b90b      	cbnz	r3, d4b7e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d4b7a:	f7ff fd6e 	bl	d465a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.105>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4b7e:	4620      	mov	r0, r4
   d4b80:	bd10      	pop	{r4, pc}

000d4b82 <_ZN8particle17BleCharacteristicD1Ev>:
    }
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d4b82:	b510      	push	{r4, lr}
   d4b84:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4b86:	3004      	adds	r0, #4
   d4b88:	f7ff ffef 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d4b8c:	4620      	mov	r0, r4
   d4b8e:	bd10      	pop	{r4, pc}

000d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d4b90:	680b      	ldr	r3, [r1, #0]
   d4b92:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4b94:	b113      	cbz	r3, d4b9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4b96:	685a      	ldr	r2, [r3, #4]
   d4b98:	3201      	adds	r2, #1
   d4b9a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4b9c:	4770      	bx	lr

000d4b9e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4b9e:	b510      	push	{r4, lr}
   d4ba0:	f851 3b04 	ldr.w	r3, [r1], #4
   d4ba4:	4604      	mov	r4, r0
   d4ba6:	f840 3b04 	str.w	r3, [r0], #4
   d4baa:	f7ff fff1 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4bae:	4620      	mov	r0, r4
   d4bb0:	bd10      	pop	{r4, pc}

000d4bb2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d4bb2:	b510      	push	{r4, lr}
   d4bb4:	f851 3b04 	ldr.w	r3, [r1], #4
   d4bb8:	4604      	mov	r4, r0
   d4bba:	f840 3b04 	str.w	r3, [r0], #4
   d4bbe:	f7ff ffe7 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d4bc2:	4620      	mov	r0, r4
   d4bc4:	bd10      	pop	{r4, pc}

000d4bc6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4bc6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4bc8:	6804      	ldr	r4, [r0, #0]
   d4bca:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4bcc:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4bce:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4bd2:	42a6      	cmp	r6, r4
   d4bd4:	d004      	beq.n	d4be0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4bd6:	1d20      	adds	r0, r4, #4
   d4bd8:	f7ff ffc7 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4bdc:	3408      	adds	r4, #8
   d4bde:	e7f8      	b.n	d4bd2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4be0:	6828      	ldr	r0, [r5, #0]
   d4be2:	f7ff fd03 	bl	d45ec <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4be6:	4628      	mov	r0, r5
   d4be8:	bd70      	pop	{r4, r5, r6, pc}

000d4bea <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    { struct __invalid_type { }; };

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
   d4bea:	b538      	push	{r3, r4, r5, lr}
   d4bec:	4604      	mov	r4, r0
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4bee:	2010      	movs	r0, #16
   d4bf0:	780d      	ldrb	r5, [r1, #0]
   d4bf2:	f7ff fa50 	bl	d4096 <_Znwj>
   d4bf6:	b120      	cbz	r0, d4c02 <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_+0x18>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4bf8:	2300      	movs	r3, #0
   d4bfa:	6003      	str	r3, [r0, #0]
   d4bfc:	6043      	str	r3, [r0, #4]
   d4bfe:	6083      	str	r3, [r0, #8]
 */
class BleGattServerImpl {
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
   d4c00:	7305      	strb	r5, [r0, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4c02:	6020      	str	r0, [r4, #0]
   d4c04:	4620      	mov	r0, r4
   d4c06:	bd38      	pop	{r3, r4, r5, pc}

000d4c08 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d4c08:	b538      	push	{r3, r4, r5, lr}
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c0a:	6804      	ldr	r4, [r0, #0]
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
   d4c0c:	4605      	mov	r5, r0
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4c0e:	b134      	cbz	r4, d4c1e <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev+0x16>
    }
    ~BleGattServerImpl() = default;
   d4c10:	4620      	mov	r0, r4
   d4c12:	f7ff ffd8 	bl	d4bc6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4c16:	2110      	movs	r1, #16
   d4c18:	4620      	mov	r0, r4
   d4c1a:	f001 fae6 	bl	d61ea <_ZdlPvj>
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
	  get_deleter()(__ptr);
	__ptr = pointer();
      }
   d4c1e:	4628      	mov	r0, r5
   d4c20:	bd38      	pop	{r3, r4, r5, pc}

000d4c22 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d4c22:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d4c24:	6904      	ldr	r4, [r0, #16]
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;
   d4c26:	f104 001c 	add.w	r0, r4, #28
   d4c2a:	f7ff ffed 	bl	d4c08 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d4c2e:	4620      	mov	r0, r4
   d4c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4c34:	f7ff ba31 	b.w	d409a <_ZdlPv>

000d4c38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d4c38:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4c3a:	6804      	ldr	r4, [r0, #0]
   d4c3c:	6843      	ldr	r3, [r0, #4]
    }
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
   d4c3e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4c40:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4c44:	42a6      	cmp	r6, r4
   d4c46:	d004      	beq.n	d4c52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4c48:	1d20      	adds	r0, r4, #4
   d4c4a:	f7ff ff8e 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c4e:	3408      	adds	r4, #8
   d4c50:	e7f8      	b.n	d4c44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d4c52:	2300      	movs	r3, #0
   d4c54:	606b      	str	r3, [r5, #4]
   d4c56:	bd70      	pop	{r4, r5, r6, pc}

000d4c58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4c58:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4c5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c5c:	4606      	mov	r6, r0
   d4c5e:	460c      	mov	r4, r1
   d4c60:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4c62:	d914      	bls.n	d4c8e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d4c64:	4290      	cmp	r0, r2
   d4c66:	d213      	bcs.n	d4c90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d4c68:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d4c6c:	1a6c      	subs	r4, r5, r1
   d4c6e:	f1a1 0708 	sub.w	r7, r1, #8
   d4c72:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4c74:	42af      	cmp	r7, r5
   d4c76:	d018      	beq.n	d4caa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d4c78:	b11c      	cbz	r4, d4c82 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d4c7a:	4629      	mov	r1, r5
   d4c7c:	4620      	mov	r0, r4
   d4c7e:	f7ff ff98 	bl	d4bb2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d4c82:	1d28      	adds	r0, r5, #4
   d4c84:	f7ff ff71 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4c88:	3d08      	subs	r5, #8
   d4c8a:	3c08      	subs	r4, #8
   d4c8c:	e7f2      	b.n	d4c74 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4c8e:	d00c      	beq.n	d4caa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d4c90:	42ac      	cmp	r4, r5
   d4c92:	d00a      	beq.n	d4caa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d4c94:	b11e      	cbz	r6, d4c9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d4c96:	4621      	mov	r1, r4
   d4c98:	4630      	mov	r0, r6
   d4c9a:	f7ff ff8a 	bl	d4bb2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d4c9e:	1d20      	adds	r0, r4, #4
   d4ca0:	f7ff ff63 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4ca4:	3408      	adds	r4, #8
   d4ca6:	3608      	adds	r6, #8
   d4ca8:	e7f2      	b.n	d4c90 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d4caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4cac <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>:
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
   d4cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4cae:	680b      	ldr	r3, [r1, #0]
   d4cb0:	69da      	ldr	r2, [r3, #28]
   d4cb2:	460e      	mov	r6, r1
   d4cb4:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4cb6:	6851      	ldr	r1, [r2, #4]
   d4cb8:	4605      	mov	r5, r0
   d4cba:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4cbe:	2400      	movs	r4, #0
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d4cc0:	4299      	cmp	r1, r3
   d4cc2:	d00d      	beq.n	d4ce0 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x34>
   d4cc4:	6818      	ldr	r0, [r3, #0]
   d4cc6:	6982      	ldr	r2, [r0, #24]
   d4cc8:	69c0      	ldr	r0, [r0, #28]
   d4cca:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d4cce:	4290      	cmp	r0, r2
   d4cd0:	d004      	beq.n	d4cdc <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x30>
   d4cd2:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d4cd6:	f887 405c 	strb.w	r4, [r7, #92]	; 0x5c
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
            for (auto& characteristic : service.impl()->characteristics()) {
   d4cda:	e7f8      	b.n	d4cce <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x22>
   d4cdc:	3308      	adds	r3, #8
            peripherals_.append(peer);
        }
    }

    void centralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d4cde:	e7ef      	b.n	d4cc0 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x14>
   d4ce0:	6833      	ldr	r3, [r6, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4ce2:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4ce6:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d4ce8:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d4cea:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d4cec:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d4cee:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d4cf0:	f8c3 200a 	str.w	r2, [r3, #10]
   d4cf4:	f8c3 200e 	str.w	r2, [r3, #14]
   d4cf8:	f8c3 2012 	str.w	r2, [r3, #18]
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
   d4cfc:	682c      	ldr	r4, [r5, #0]
   d4cfe:	686b      	ldr	r3, [r5, #4]
   d4d00:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4d04:	42bc      	cmp	r4, r7
   d4d06:	d016      	beq.n	d4d36 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
            if (*p == value) {
   d4d08:	4631      	mov	r1, r6
   d4d0a:	4620      	mov	r0, r4
   d4d0c:	f7ff feb9 	bl	d4a82 <_ZN8particle13BlePeerDeviceeqERKS0_>
   d4d10:	b908      	cbnz	r0, d4d16 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x6a>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d4d12:	3408      	adds	r4, #8
   d4d14:	e7f6      	b.n	d4d04 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x58>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d4d16:	b174      	cbz	r4, d4d36 <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE+0x8a>
   d4d18:	1d20      	adds	r0, r4, #4
   d4d1a:	f7ff ff26 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d4d1e:	682b      	ldr	r3, [r5, #0]
   d4d20:	686a      	ldr	r2, [r5, #4]
   d4d22:	f104 0108 	add.w	r1, r4, #8
   d4d26:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d4d2a:	4620      	mov	r0, r4
   d4d2c:	f7ff ff94 	bl	d4c58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d4d30:	686b      	ldr	r3, [r5, #4]
   d4d32:	3b01      	subs	r3, #1
   d4d34:	606b      	str	r3, [r5, #4]
   d4d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d4d38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4d3a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d4d3c:	6846      	ldr	r6, [r0, #4]
   d4d3e:	4668      	mov	r0, sp
   d4d40:	f7ff ff37 	bl	d4bb2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d4d44:	6867      	ldr	r7, [r4, #4]
   d4d46:	68a3      	ldr	r3, [r4, #8]
   d4d48:	429f      	cmp	r7, r3
   d4d4a:	db14      	blt.n	d4d76 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d4d4c:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d4d4e:	2f00      	cmp	r7, #0
   d4d50:	dd0b      	ble.n	d4d6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4d52:	00f8      	lsls	r0, r7, #3
   d4d54:	f7ff fc42 	bl	d45dc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4d58:	4605      	mov	r5, r0
   d4d5a:	b300      	cbz	r0, d4d9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d4d5c:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4d60:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d4d64:	f7ff ff78 	bl	d4c58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d4d68:	e000      	b.n	d4d6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d4d6a:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4d6c:	6820      	ldr	r0, [r4, #0]
   d4d6e:	f7ff fc3d 	bl	d45ec <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4d72:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4d74:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4d76:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d4d78:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4d7a:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d4d7e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d4d82:	4629      	mov	r1, r5
   d4d84:	f105 0008 	add.w	r0, r5, #8
   d4d88:	f7ff ff66 	bl	d4c58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d4d8c:	b11d      	cbz	r5, d4d96 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d4d8e:	4669      	mov	r1, sp
   d4d90:	4628      	mov	r0, r5
   d4d92:	f7ff ff0e 	bl	d4bb2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d4d96:	6863      	ldr	r3, [r4, #4]
   d4d98:	3301      	adds	r3, #1
   d4d9a:	6063      	str	r3, [r4, #4]
   d4d9c:	2501      	movs	r5, #1
   d4d9e:	a801      	add	r0, sp, #4
   d4da0:	f7ff fee3 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d4da4:	4628      	mov	r0, r5
   d4da6:	b003      	add	sp, #12
   d4da8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4daa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4daa:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4dac:	6804      	ldr	r4, [r0, #0]
   d4dae:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4db0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4db2:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4db6:	42a6      	cmp	r6, r4
   d4db8:	d004      	beq.n	d4dc4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0x1a>
   d4dba:	1d20      	adds	r0, r4, #4
   d4dbc:	f7ff fed5 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4dc0:	3408      	adds	r4, #8
   d4dc2:	e7f8      	b.n	d4db6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4dc4:	6828      	ldr	r0, [r5, #0]
   d4dc6:	f7ff fc11 	bl	d45ec <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4dca:	4628      	mov	r0, r5
   d4dcc:	bd70      	pop	{r4, r5, r6, pc}

000d4dce <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4dce:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4dd0:	4604      	mov	r4, r0
   d4dd2:	b138      	cbz	r0, d4de4 <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31+0x16>
 * BlePeripheralImpl definition
 */
class BlePeripheralImpl {
public:
    BlePeripheralImpl() = default;
    ~BlePeripheralImpl() = default;
   d4dd4:	f7ff ffe9 	bl	d4daa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d4dd8:	4620      	mov	r0, r4
   d4dda:	210c      	movs	r1, #12
      }
   d4ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4de0:	f001 ba03 	b.w	d61ea <_ZdlPvj>
   d4de4:	bd10      	pop	{r4, pc}

000d4de6 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4de6:	b510      	push	{r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4de8:	4604      	mov	r4, r0
   d4dea:	b138      	cbz	r0, d4dfc <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32+0x16>
 * BleCentralImpl definition
 */
class BleCentralImpl {
public:
    BleCentralImpl() = default;
    ~BleCentralImpl() = default;
   d4dec:	f7ff ffdd 	bl	d4daa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEED1Ev>
   d4df0:	4620      	mov	r0, r4
   d4df2:	210c      	movs	r1, #12
      }
   d4df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4df8:	f001 b9f7 	b.w	d61ea <_ZdlPvj>
   d4dfc:	bd10      	pop	{r4, pc}
	...

000d4e00 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d4e02:	2500      	movs	r5, #0


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d4e04:	4604      	mov	r4, r0
        : connectedCb_(nullptr),
          disconnectedCb_(nullptr),
          connectedContext(nullptr),
          disconnectedContext(nullptr) {
   d4e06:	6005      	str	r5, [r0, #0]
   d4e08:	6045      	str	r5, [r0, #4]
   d4e0a:	6085      	str	r5, [r0, #8]
   d4e0c:	60c5      	str	r5, [r0, #12]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4e0e:	6105      	str	r5, [r0, #16]
   d4e10:	6145      	str	r5, [r0, #20]
   d4e12:	6185      	str	r5, [r0, #24]
   d4e14:	61c5      	str	r5, [r0, #28]
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d4e16:	4628      	mov	r0, r5
   d4e18:	f7ff f9e0 	bl	d41dc <hal_ble_stack_init>
   d4e1c:	b120      	cbz	r0, d4e28 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d4e1e:	4a25      	ldr	r2, [pc, #148]	; (d4eb4 <_ZN8particle14BleLocalDeviceC1Ev+0xb4>)
   d4e20:	4629      	mov	r1, r5
   d4e22:	200a      	movs	r0, #10
   d4e24:	f7ff fb56 	bl	d44d4 <panic_>

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d4e28:	2301      	movs	r3, #1
   d4e2a:	f10d 0103 	add.w	r1, sp, #3
   d4e2e:	a801      	add	r0, sp, #4
   d4e30:	f88d 3003 	strb.w	r3, [sp, #3]
   d4e34:	f7ff fed9 	bl	d4bea <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e38:	6925      	ldr	r5, [r4, #16]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4e3a:	9b01      	ldr	r3, [sp, #4]
      __a = _GLIBCXX_MOVE(__b);
   d4e3c:	6123      	str	r3, [r4, #16]
      /// Release ownership of any stored pointer.
      pointer
      release() noexcept
      {
	pointer __p = get();
	std::get<0>(_M_t) = pointer();
   d4e3e:	2200      	movs	r2, #0
   d4e40:	9201      	str	r2, [sp, #4]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4e42:	b135      	cbz	r5, d4e52 <_ZN8particle14BleLocalDeviceC1Ev+0x52>
public:
    BleGattServerImpl() = delete;
    BleGattServerImpl(bool local)
            : local_(local) {
    }
    ~BleGattServerImpl() = default;
   d4e44:	4628      	mov	r0, r5
   d4e46:	f7ff febe 	bl	d4bc6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e4a:	2110      	movs	r1, #16
   d4e4c:	4628      	mov	r0, r5
   d4e4e:	f001 f9cc 	bl	d61ea <_ZdlPvj>
          disconnectedContext(nullptr) {
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);

    // The following members must not be in the initializer list, since it may call
    // BLE HAL APIs and BLE stack must be initialized previous to these APIs.
    gattsProxy_ = std::make_unique<BleGattServerImpl>(true);
   d4e52:	a801      	add	r0, sp, #4
   d4e54:	f7ff fed8 	bl	d4c08 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4e58:	2001      	movs	r0, #1
   d4e5a:	f7ff f91c 	bl	d4096 <_Znwj>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e5e:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4e60:	6160      	str	r0, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4e62:	b11b      	cbz	r3, d4e6c <_ZN8particle14BleLocalDeviceC1Ev+0x6c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e64:	2101      	movs	r1, #1
   d4e66:	4618      	mov	r0, r3
   d4e68:	f001 f9bf 	bl	d61ea <_ZdlPvj>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4e6c:	200c      	movs	r0, #12
   d4e6e:	f7ff f912 	bl	d4096 <_Znwj>
   d4e72:	4603      	mov	r3, r0
   d4e74:	b118      	cbz	r0, d4e7e <_ZN8particle14BleLocalDeviceC1Ev+0x7e>
   d4e76:	2200      	movs	r2, #0
   d4e78:	6002      	str	r2, [r0, #0]
   d4e7a:	6042      	str	r2, [r0, #4]
   d4e7c:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e7e:	69a0      	ldr	r0, [r4, #24]
      __a = _GLIBCXX_MOVE(__b);
   d4e80:	61a3      	str	r3, [r4, #24]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4e82:	b108      	cbz	r0, d4e88 <_ZN8particle14BleLocalDeviceC1Ev+0x88>
	  get_deleter()(__p);
   d4e84:	f7ff ffa3 	bl	d4dce <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d4e88:	200c      	movs	r0, #12
   d4e8a:	f7ff f904 	bl	d4096 <_Znwj>
   d4e8e:	4603      	mov	r3, r0
   d4e90:	b118      	cbz	r0, d4e9a <_ZN8particle14BleLocalDeviceC1Ev+0x9a>
   d4e92:	2200      	movs	r2, #0
   d4e94:	6002      	str	r2, [r0, #0]
   d4e96:	6042      	str	r2, [r0, #4]
   d4e98:	6082      	str	r2, [r0, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4e9a:	69e0      	ldr	r0, [r4, #28]
      __a = _GLIBCXX_MOVE(__b);
   d4e9c:	61e3      	str	r3, [r4, #28]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4e9e:	b108      	cbz	r0, d4ea4 <_ZN8particle14BleLocalDeviceC1Ev+0xa4>
	  get_deleter()(__p);
   d4ea0:	f7ff ffa1 	bl	d4de6 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>
    gattcProxy_ = std::make_unique<BleGattClientImpl>();
    peripheralProxy_ = std::make_unique<BlePeripheralImpl>();
    centralProxy_ = std::make_unique<BleCentralImpl>();

    hal_ble_set_callback_on_events(onBleEvents, this, nullptr);
   d4ea4:	2200      	movs	r2, #0
   d4ea6:	4621      	mov	r1, r4
   d4ea8:	4803      	ldr	r0, [pc, #12]	; (d4eb8 <_ZN8particle14BleLocalDeviceC1Ev+0xb8>)
   d4eaa:	f7ff f99f 	bl	d41ec <hal_ble_set_callback_on_events>
}
   d4eae:	4620      	mov	r0, r4
   d4eb0:	b003      	add	sp, #12
   d4eb2:	bd30      	pop	{r4, r5, pc}
   d4eb4:	000d42d5 	.word	0x000d42d5
   d4eb8:	000d52dd 	.word	0x000d52dd

000d4ebc <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d4ebc:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d4ebe:	4c0a      	ldr	r4, [pc, #40]	; (d4ee8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d4ec0:	6823      	ldr	r3, [r4, #0]
   d4ec2:	07db      	lsls	r3, r3, #31
   d4ec4:	d40e      	bmi.n	d4ee4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4ec6:	4620      	mov	r0, r4
   d4ec8:	f7ff f8eb 	bl	d40a2 <__cxa_guard_acquire>
   d4ecc:	b150      	cbz	r0, d4ee4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d4ece:	4807      	ldr	r0, [pc, #28]	; (d4eec <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4ed0:	f7ff ff96 	bl	d4e00 <_ZN8particle14BleLocalDeviceC1Ev>
   d4ed4:	4620      	mov	r0, r4
   d4ed6:	f7ff f8e9 	bl	d40ac <__cxa_guard_release>
   d4eda:	4a05      	ldr	r2, [pc, #20]	; (d4ef0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d4edc:	4905      	ldr	r1, [pc, #20]	; (d4ef4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d4ede:	4803      	ldr	r0, [pc, #12]	; (d4eec <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4ee0:	f001 f97e 	bl	d61e0 <__aeabi_atexit>
    return instance;
}
   d4ee4:	4801      	ldr	r0, [pc, #4]	; (d4eec <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d4ee6:	bd10      	pop	{r4, pc}
   d4ee8:	2003e3cc 	.word	0x2003e3cc
   d4eec:	2003e3ac 	.word	0x2003e3ac
   d4ef0:	2003e3a4 	.word	0x2003e3a4
   d4ef4:	000d4ef9 	.word	0x000d4ef9

000d4ef8 <_ZN8particle14BleLocalDeviceD1Ev>:

    static BleLocalDevice& getInstance();

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d4ef8:	b510      	push	{r4, lr}
   d4efa:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4efc:	69c0      	ldr	r0, [r0, #28]
   d4efe:	b108      	cbz	r0, d4f04 <_ZN8particle14BleLocalDeviceD1Ev+0xc>
	  get_deleter()(__ptr);
   d4f00:	f7ff ff71 	bl	d4de6 <_ZNKSt14default_deleteIN8particle14BleCentralImplEEclEPS1_.isra.32>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f04:	69a0      	ldr	r0, [r4, #24]
   d4f06:	b108      	cbz	r0, d4f0c <_ZN8particle14BleLocalDeviceD1Ev+0x14>
	  get_deleter()(__ptr);
   d4f08:	f7ff ff61 	bl	d4dce <_ZNKSt14default_deleteIN8particle17BlePeripheralImplEEclEPS1_.isra.31>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f0c:	6960      	ldr	r0, [r4, #20]
   d4f0e:	b110      	cbz	r0, d4f16 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f10:	2101      	movs	r1, #1
   d4f12:	f001 f96a 	bl	d61ea <_ZdlPvj>
   d4f16:	f104 0010 	add.w	r0, r4, #16
   d4f1a:	f7ff fe75 	bl	d4c08 <_ZNSt10unique_ptrIN8particle17BleGattServerImplESt14default_deleteIS1_EED1Ev>
   d4f1e:	4620      	mov	r0, r4
   d4f20:	bd10      	pop	{r4, pc}

000d4f22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4f22:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f26:	4606      	mov	r6, r0
   d4f28:	460c      	mov	r4, r1
   d4f2a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4f2c:	d914      	bls.n	d4f58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d4f2e:	4290      	cmp	r0, r2
   d4f30:	d213      	bcs.n	d4f5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d4f32:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d4f36:	1a6c      	subs	r4, r5, r1
   d4f38:	f1a1 0708 	sub.w	r7, r1, #8
   d4f3c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4f3e:	42af      	cmp	r7, r5
   d4f40:	d018      	beq.n	d4f74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d4f42:	b11c      	cbz	r4, d4f4c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d4f44:	4629      	mov	r1, r5
   d4f46:	4620      	mov	r0, r4
   d4f48:	f7ff fe29 	bl	d4b9e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d4f4c:	1d28      	adds	r0, r5, #4
   d4f4e:	f7ff fe0c 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4f52:	3d08      	subs	r5, #8
   d4f54:	3c08      	subs	r4, #8
   d4f56:	e7f2      	b.n	d4f3e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4f58:	d00c      	beq.n	d4f74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d4f5a:	42ac      	cmp	r4, r5
   d4f5c:	d00a      	beq.n	d4f74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d4f5e:	b11e      	cbz	r6, d4f68 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d4f60:	4621      	mov	r1, r4
   d4f62:	4630      	mov	r0, r6
   d4f64:	f7ff fe1b 	bl	d4b9e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d4f68:	1d20      	adds	r0, r4, #4
   d4f6a:	f7ff fdfe 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4f6e:	3408      	adds	r4, #8
   d4f70:	3608      	adds	r6, #8
   d4f72:	e7f2      	b.n	d4f5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d4f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4f76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d4f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4f78:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d4f7a:	6846      	ldr	r6, [r0, #4]
   d4f7c:	4668      	mov	r0, sp
   d4f7e:	f7ff fe0e 	bl	d4b9e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d4f82:	6867      	ldr	r7, [r4, #4]
   d4f84:	68a3      	ldr	r3, [r4, #8]
   d4f86:	429f      	cmp	r7, r3
   d4f88:	db14      	blt.n	d4fb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x3e>
   d4f8a:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d4f8c:	2f00      	cmp	r7, #0
   d4f8e:	dd0b      	ble.n	d4fa8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x32>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4f90:	00f8      	lsls	r0, r7, #3
   d4f92:	f7ff fb23 	bl	d45dc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4f96:	4605      	mov	r5, r0
   d4f98:	b300      	cbz	r0, d4fdc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x66>
                return false;
            }
            move(d, data_, data_ + size_);
   d4f9a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4f9e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d4fa2:	f7ff ffbe 	bl	d4f22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d4fa6:	e000      	b.n	d4faa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x34>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d4fa8:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4faa:	6820      	ldr	r0, [r4, #0]
   d4fac:	f7ff fb1e 	bl	d45ec <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4fb0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4fb2:	60a7      	str	r7, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4fb4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d4fb6:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d4fb8:	eb03 05c6 	add.w	r5, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d4fbc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d4fc0:	4629      	mov	r1, r5
   d4fc2:	f105 0008 	add.w	r0, r5, #8
   d4fc6:	f7ff ffac 	bl	d4f22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d4fca:	b11d      	cbz	r5, d4fd4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x5e>
   d4fcc:	4669      	mov	r1, sp
   d4fce:	4628      	mov	r0, r5
   d4fd0:	f7ff fde5 	bl	d4b9e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d4fd4:	6863      	ldr	r3, [r4, #4]
   d4fd6:	3301      	adds	r3, #1
   d4fd8:	6063      	str	r3, [r4, #4]
   d4fda:	2501      	movs	r5, #1
   d4fdc:	a801      	add	r0, sp, #4
   d4fde:	f7ff fdc4 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d4fe2:	4628      	mov	r0, r5
   d4fe4:	b003      	add	sp, #12
   d4fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4fe8 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>:
            }
        }
        return nullptr;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
   d4fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4fec:	680c      	ldr	r4, [r1, #0]
   d4fee:	b08b      	sub	sp, #44	; 0x2c
   d4ff0:	4606      	mov	r6, r0
   d4ff2:	460f      	mov	r7, r1
        BleCharacteristicImpl* charImpl = characteristic.impl();
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
   d4ff4:	b314      	cbz	r4, d503c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x54>
   d4ff6:	6985      	ldr	r5, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d4ff8:	69c3      	ldr	r3, [r0, #28]
            dataCb(data, len, peer, context);
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
   d4ffa:	f104 0a02 	add.w	sl, r4, #2
   d4ffe:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
                && svcUuid == impl.svcUuid
   d5002:	f104 0b16 	add.w	fp, r4, #22
    BleAttributeHandle endHandle;

private:
    bool contains(const BleCharacteristic& characteristic) {
        if (characteristic.impl() != nullptr) {
            for (const auto& stubChar : characteristics_) {
   d5006:	45a8      	cmp	r8, r5
   d5008:	d016      	beq.n	d5038 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x50>
   d500a:	f8d5 9000 	ldr.w	r9, [r5]
            dataCb(data, len, peer, context);
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
   d500e:	4650      	mov	r0, sl
   d5010:	f109 0102 	add.w	r1, r9, #2
   d5014:	f7ff fc19 	bl	d484a <_ZNK8particle7BleUuideqERKS0_>
                && svcUuid == impl.svcUuid
                && isLocal == impl.isLocal) {
   d5018:	2800      	cmp	r0, #0
   d501a:	d06b      	beq.n	d50f4 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
        }
    }

    bool operator==(const BleCharacteristicImpl& impl) {
        if (uuid == impl.uuid
                && svcUuid == impl.svcUuid
   d501c:	f109 0116 	add.w	r1, r9, #22
   d5020:	4658      	mov	r0, fp
   d5022:	f7ff fc12 	bl	d484a <_ZNK8particle7BleUuideqERKS0_>
   d5026:	2800      	cmp	r0, #0
   d5028:	d064      	beq.n	d50f4 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
                && isLocal == impl.isLocal) {
   d502a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d502e:	f899 303c 	ldrb.w	r3, [r9, #60]	; 0x3c
   d5032:	429a      	cmp	r2, r3
   d5034:	d15e      	bne.n	d50f4 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x10c>
   d5036:	e001      	b.n	d503c <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x54>
        return nullptr;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
        BleCharacteristicImpl* charImpl = characteristic.impl();
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
   d5038:	7823      	ldrb	r3, [r4, #0]
   d503a:	b90b      	cbnz	r3, d5040 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x58>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d503c:	4830      	ldr	r0, [pc, #192]	; (d5100 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x118>)
   d503e:	e05b      	b.n	d50f8 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
        }
        if (characteristic.impl()->isLocal) {
   d5040:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   d5044:	2b00      	cmp	r3, #0
   d5046:	d041      	beq.n	d50cc <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0xe4>
            return SYSTEM_ERROR_INVALID_STATE;
        }
    }

    void assignUuidIfNeeded() {
        if (!uuid.isValid()) {
   d5048:	3402      	adds	r4, #2
   d504a:	4620      	mov	r0, r4
   d504c:	f7ff fbe6 	bl	d481c <_ZNK8particle7BleUuid7isValidEv>
   d5050:	b9b0      	cbnz	r0, d5080 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x98>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5052:	4b2c      	ldr	r3, [pc, #176]	; (d5104 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x11c>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5054:	492c      	ldr	r1, [pc, #176]	; (d5108 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x120>)
    }

    void assignUuidIfNeeded() {
        if (!uuid.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5056:	881a      	ldrh	r2, [r3, #0]
   d5058:	3201      	adds	r2, #1
   d505a:	b292      	uxth	r2, r2
   d505c:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d505e:	a801      	add	r0, sp, #4
   d5060:	2301      	movs	r3, #1
   d5062:	f7ff fb6c 	bl	d473e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            uuid = newUuid;
   d5066:	ad05      	add	r5, sp, #20
   d5068:	aa01      	add	r2, sp, #4
   d506a:	4613      	mov	r3, r2
   d506c:	cb03      	ldmia	r3!, {r0, r1}
   d506e:	42ab      	cmp	r3, r5
   d5070:	6020      	str	r0, [r4, #0]
   d5072:	6061      	str	r1, [r4, #4]
   d5074:	461a      	mov	r2, r3
   d5076:	f104 0408 	add.w	r4, r4, #8
   d507a:	d1f6      	bne.n	d506a <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x82>
   d507c:	6818      	ldr	r0, [r3, #0]
   d507e:	6020      	str	r0, [r4, #0]
        if (charImpl == nullptr || contains(characteristic) || charImpl->properties == BleCharacteristicProperty::NONE) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        if (characteristic.impl()->isLocal) {
            characteristic.impl()->assignUuidIfNeeded();
            hal_ble_char_init_t char_init = {};
   d5080:	2424      	movs	r4, #36	; 0x24
   d5082:	4622      	mov	r2, r4
   d5084:	2100      	movs	r1, #0
   d5086:	a801      	add	r0, sp, #4
   d5088:	f001 fa3d 	bl	d6506 <memset>
            char_init.size = sizeof(hal_ble_char_init_t);
   d508c:	f8ad 4006 	strh.w	r4, [sp, #6]
   d5090:	683c      	ldr	r4, [r7, #0]
            char_init.uuid = characteristic.impl()->uuid.UUID();
   d5092:	aa04      	add	r2, sp, #16
   d5094:	1ca3      	adds	r3, r4, #2
   d5096:	f104 0e12 	add.w	lr, r4, #18
   d509a:	6818      	ldr	r0, [r3, #0]
   d509c:	6859      	ldr	r1, [r3, #4]
   d509e:	4615      	mov	r5, r2
   d50a0:	c503      	stmia	r5!, {r0, r1}
   d50a2:	3308      	adds	r3, #8
   d50a4:	4573      	cmp	r3, lr
   d50a6:	462a      	mov	r2, r5
   d50a8:	d1f7      	bne.n	d509a <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0xb2>
   d50aa:	6818      	ldr	r0, [r3, #0]
   d50ac:	6028      	str	r0, [r5, #0]
            char_init.properties = static_cast<uint8_t>(characteristic.impl()->properties);
   d50ae:	7823      	ldrb	r3, [r4, #0]
   d50b0:	f88d 3008 	strb.w	r3, [sp, #8]
            char_init.service_handle = startHandle;
   d50b4:	8ab3      	ldrh	r3, [r6, #20]
   d50b6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
            char_init.description = characteristic.impl()->description.c_str();
   d50ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d50bc:	9303      	str	r3, [sp, #12]
            int ret = hal_ble_gatt_server_add_characteristic(&char_init, &characteristic.impl()->attrHandles, nullptr);
   d50be:	2200      	movs	r2, #0
   d50c0:	f104 013e 	add.w	r1, r4, #62	; 0x3e
   d50c4:	a801      	add	r0, sp, #4
   d50c6:	f7ff f8bb 	bl	d4240 <hal_ble_gatt_server_add_characteristic>
            if (ret != SYSTEM_ERROR_NONE) {
   d50ca:	b9a8      	cbnz	r0, d50f8 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
   d50cc:	683b      	ldr	r3, [r7, #0]
                return ret;
            }
        }
        characteristic.impl()->svcImpl = this;
   d50ce:	659e      	str	r6, [r3, #88]	; 0x58
   d50d0:	683b      	ldr	r3, [r7, #0]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d50d2:	2201      	movs	r2, #1
   d50d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
   d50d8:	4639      	mov	r1, r7
   d50da:	a801      	add	r0, sp, #4
   d50dc:	f7ff fd5f 	bl	d4b9e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            }
        }
        characteristic.impl()->svcImpl = this;
        characteristic.impl()->setValid(true);
        LOG_DEBUG(TRACE, "characteristics.append(characteristic)");
        characteristics_.append(characteristic);
   d50e0:	a901      	add	r1, sp, #4
   d50e2:	f106 0018 	add.w	r0, r6, #24
   d50e6:	f7ff ff46 	bl	d4f76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d50ea:	a802      	add	r0, sp, #8
   d50ec:	f7ff fd3d 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return SYSTEM_ERROR_NONE;
   d50f0:	2000      	movs	r0, #0
   d50f2:	e001      	b.n	d50f8 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x110>
   d50f4:	3508      	adds	r5, #8
   d50f6:	e786      	b.n	d5006 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE+0x1e>
    }
   d50f8:	b00b      	add	sp, #44	; 0x2c
   d50fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d50fe:	bf00      	nop
   d5100:	fffffef2 	.word	0xfffffef2
   d5104:	2003e3d0 	.word	0x2003e3d0
   d5108:	000d6680 	.word	0x000d6680

000d510c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d510c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d510e:	b570      	push	{r4, r5, r6, lr}
   d5110:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5112:	d91a      	bls.n	d514a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5114:	4290      	cmp	r0, r2
   d5116:	d219      	bcs.n	d514c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5118:	f1a1 0608 	sub.w	r6, r1, #8
   d511c:	1a51      	subs	r1, r2, r1
   d511e:	3904      	subs	r1, #4
   d5120:	1f15      	subs	r5, r2, #4
   d5122:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5124:	1f2b      	subs	r3, r5, #4
   d5126:	429e      	cmp	r6, r3
   d5128:	d025      	beq.n	d5176 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d512a:	2c04      	cmp	r4, #4
   d512c:	d007      	beq.n	d513e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d512e:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5132:	f844 3c04 	str.w	r3, [r4, #-4]
   d5136:	4629      	mov	r1, r5
   d5138:	4620      	mov	r0, r4
   d513a:	f7ff fd29 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d513e:	4628      	mov	r0, r5
   d5140:	f7ff fd13 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5144:	3d08      	subs	r5, #8
   d5146:	3c08      	subs	r4, #8
   d5148:	e7ec      	b.n	d5124 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d514a:	d014      	beq.n	d5176 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d514c:	1d0c      	adds	r4, r1, #4
   d514e:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5150:	1f23      	subs	r3, r4, #4
   d5152:	429d      	cmp	r5, r3
   d5154:	d00f      	beq.n	d5176 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d5156:	2e04      	cmp	r6, #4
   d5158:	d007      	beq.n	d516a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d515a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d515e:	f846 3c04 	str.w	r3, [r6, #-4]
   d5162:	4621      	mov	r1, r4
   d5164:	4630      	mov	r0, r6
   d5166:	f7ff fd13 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d516a:	4620      	mov	r0, r4
   d516c:	f7ff fcfd 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5170:	3408      	adds	r4, #8
   d5172:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5174:	e7ec      	b.n	d5150 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5176:	bd70      	pop	{r4, r5, r6, pc}

000d5178 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE>:

    Vector<BleService>& services() {
        return services_;
    }

    int addService(BleService& svc) {
   d5178:	b5f0      	push	{r4, r5, r6, r7, lr}
   d517a:	680f      	ldr	r7, [r1, #0]
   d517c:	b089      	sub	sp, #36	; 0x24
   d517e:	460d      	mov	r5, r1
        if (getService(svc.impl()->uuid) != nullptr) {
   d5180:	4639      	mov	r1, r7

    Vector<BleService>& services() {
        return services_;
    }

    int addService(BleService& svc) {
   d5182:	4604      	mov	r4, r0
        if (getService(svc.impl()->uuid) != nullptr) {
   d5184:	f7ff fc69 	bl	d4a5a <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>
   d5188:	2800      	cmp	r0, #0
   d518a:	d15e      	bne.n	d524a <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd2>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        if (local_) {
   d518c:	7b23      	ldrb	r3, [r4, #12]
   d518e:	b1bb      	cbz	r3, d51c0 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x48>
            hal_ble_uuid_t halUuid = svc.impl()->uuid.UUID();
   d5190:	ae03      	add	r6, sp, #12
   d5192:	463b      	mov	r3, r7
   d5194:	f107 0c10 	add.w	ip, r7, #16
   d5198:	46b6      	mov	lr, r6
   d519a:	6818      	ldr	r0, [r3, #0]
   d519c:	6859      	ldr	r1, [r3, #4]
   d519e:	4632      	mov	r2, r6
   d51a0:	c203      	stmia	r2!, {r0, r1}
   d51a2:	3308      	adds	r3, #8
   d51a4:	4563      	cmp	r3, ip
   d51a6:	4616      	mov	r6, r2
   d51a8:	d1f7      	bne.n	d519a <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x22>
   d51aa:	6818      	ldr	r0, [r3, #0]
   d51ac:	6010      	str	r0, [r2, #0]
            int ret = hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle, nullptr);
   d51ae:	2300      	movs	r3, #0
   d51b0:	f107 0214 	add.w	r2, r7, #20
   d51b4:	4671      	mov	r1, lr
   d51b6:	2001      	movs	r0, #1
   d51b8:	f7ff f838 	bl	d422c <hal_ble_gatt_server_add_service>
            if (ret != SYSTEM_ERROR_NONE) {
   d51bc:	2800      	cmp	r0, #0
   d51be:	d145      	bne.n	d524c <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd4>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51c0:	4629      	mov	r1, r5
   d51c2:	a802      	add	r0, sp, #8
   d51c4:	f851 3b04 	ldr.w	r3, [r1], #4
   d51c8:	9301      	str	r3, [sp, #4]
   d51ca:	f7ff fce1 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d51ce:	9b01      	ldr	r3, [sp, #4]
   d51d0:	9303      	str	r3, [sp, #12]
   d51d2:	a902      	add	r1, sp, #8
   d51d4:	a804      	add	r0, sp, #16
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d51d6:	6867      	ldr	r7, [r4, #4]
   d51d8:	f7ff fcda 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d51dc:	6865      	ldr	r5, [r4, #4]
   d51de:	68a3      	ldr	r3, [r4, #8]
   d51e0:	429d      	cmp	r5, r3
   d51e2:	db14      	blt.n	d520e <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x96>
   d51e4:	3501      	adds	r5, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d51e6:	2d00      	cmp	r5, #0
   d51e8:	dd0b      	ble.n	d5202 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x8a>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d51ea:	00e8      	lsls	r0, r5, #3
   d51ec:	f7ff f9f6 	bl	d45dc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d51f0:	4606      	mov	r6, r0
   d51f2:	b310      	cbz	r0, d523a <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xc2>
                return false;
            }
            move(d, data_, data_ + size_);
   d51f4:	e894 0006 	ldmia.w	r4, {r1, r2}
   d51f8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d51fc:	f7ff ff86 	bl	d510c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5200:	e000      	b.n	d5204 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0x8c>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5202:	2600      	movs	r6, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5204:	6820      	ldr	r0, [r4, #0]
   d5206:	f7ff f9f1 	bl	d45ec <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d520a:	6026      	str	r6, [r4, #0]
        capacity_ = n;
   d520c:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d520e:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5210:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5212:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5216:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d521a:	4629      	mov	r1, r5
   d521c:	f105 0008 	add.w	r0, r5, #8
   d5220:	f7ff ff74 	bl	d510c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5224:	b135      	cbz	r5, d5234 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xbc>
   d5226:	9b03      	ldr	r3, [sp, #12]
   d5228:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d522c:	a904      	add	r1, sp, #16
   d522e:	1d28      	adds	r0, r5, #4
   d5230:	f7ff fcae 	bl	d4b90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5234:	6863      	ldr	r3, [r4, #4]
   d5236:	3301      	adds	r3, #1
   d5238:	6063      	str	r3, [r4, #4]
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d523a:	a804      	add	r0, sp, #16
   d523c:	f7ff fc95 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5240:	a802      	add	r0, sp, #8
   d5242:	f7ff fc92 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                return ret;
            }
        }
        DEBUG("services.append(service)");
        services_.append(svc);
   d5246:	2000      	movs	r0, #0
   d5248:	e000      	b.n	d524c <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd4>
        return services_;
    }

    int addService(BleService& svc) {
        if (getService(svc.impl()->uuid) != nullptr) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d524a:	4801      	ldr	r0, [pc, #4]	; (d5250 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE+0xd8>)
            }
        }
        DEBUG("services.append(service)");
        services_.append(svc);
        return SYSTEM_ERROR_NONE;
    }
   d524c:	b009      	add	sp, #36	; 0x24
   d524e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5250:	fffffef2 	.word	0xfffffef2

000d5254 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>:
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d5254:	b573      	push	{r0, r1, r4, r5, r6, lr}
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5256:	2500      	movs	r5, #0
   d5258:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d525a:	6045      	str	r5, [r0, #4]
          }
          _Alloc _M_alloc;
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
   d525c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d525e:	2020      	movs	r0, #32
   d5260:	f7fe ff19 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5264:	4604      	mov	r4, r0
   d5266:	b1b0      	cbz	r0, d5296 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x42>
            : role(BLE_ROLE_INVALID),
              address(),
              connParams(),
              connHandle(BLE_INVALID_CONN_HANDLE),
              rssi(0x7F),
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
   d5268:	4603      	mov	r3, r0
   d526a:	a901      	add	r1, sp, #4
   d526c:	f803 5b01 	strb.w	r5, [r3], #1
   d5270:	f8c0 5001 	str.w	r5, [r0, #1]
   d5274:	605d      	str	r5, [r3, #4]
   d5276:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d527a:	82c3      	strh	r3, [r0, #22]
   d527c:	237f      	movs	r3, #127	; 0x7f
   d527e:	f8c0 500a 	str.w	r5, [r0, #10]
   d5282:	f8c0 500e 	str.w	r5, [r0, #14]
   d5286:	f8c0 5012 	str.w	r5, [r0, #18]
   d528a:	7603      	strb	r3, [r0, #24]
   d528c:	301c      	adds	r0, #28
   d528e:	f88d 5004 	strb.w	r5, [sp, #4]
   d5292:	f7ff fcaa 	bl	d4bea <_ZSt11make_uniqueIN8particle17BleGattServerImplEIbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5296:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5298:	2014      	movs	r0, #20
   d529a:	9301      	str	r3, [sp, #4]
   d529c:	f7fe fefb 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d52a0:	b128      	cbz	r0, d52ae <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x5a>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d52a2:	2301      	movs	r3, #1
   d52a4:	6043      	str	r3, [r0, #4]
   d52a6:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d52a8:	4b06      	ldr	r3, [pc, #24]	; (d52c4 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_+0x70>)
   d52aa:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d52ac:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d52ae:	6873      	ldr	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d52b0:	6034      	str	r4, [r6, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d52b2:	6070      	str	r0, [r6, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d52b4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d52b6:	9301      	str	r3, [sp, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d52b8:	f7ff fc57 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
	  __enable_shared_from_this_helper(_M_refcount, _M_ptr, _M_ptr);
	}
   d52bc:	4630      	mov	r0, r6
   d52be:	b002      	add	sp, #8
   d52c0:	bd70      	pop	{r4, r5, r6, pc}
   d52c2:	bf00      	nop
   d52c4:	000d666c 	.word	0x000d666c

000d52c8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d52c8:	b513      	push	{r0, r1, r4, lr}
    private:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		   _Args&&... __args)
	: __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...)
   d52ca:	f04f 0100 	mov.w	r1, #0
   d52ce:	aa01      	add	r2, sp, #4
   d52d0:	4604      	mov	r4, r0
   d52d2:	f7ff ffbf 	bl	d5254 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ISaIS1_EIEEESt19_Sp_make_shared_tagRKT_DpOT0_>
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
}
   d52d6:	4620      	mov	r0, r4
   d52d8:	b002      	add	sp, #8
   d52da:	bd10      	pop	{r4, pc}

000d52dc <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleLocalDevice::onBleEvents(const hal_ble_evts_t *event, void* context) {
   d52dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d52de:	4604      	mov	r4, r0
   d52e0:	b08b      	sub	sp, #44	; 0x2c
    if (context == nullptr) {
   d52e2:	460d      	mov	r5, r1
   d52e4:	2900      	cmp	r1, #0
   d52e6:	f000 80a5 	beq.w	d5434 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x158>
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d52ea:	a803      	add	r0, sp, #12
   d52ec:	f7ff f9dc 	bl	d46a8 <_ZN8particle3ble13WiringBleLockC1Ev>

    switch (event->type) {
   d52f0:	6863      	ldr	r3, [r4, #4]
   d52f2:	3b03      	subs	r3, #3
   d52f4:	2b07      	cmp	r3, #7
   d52f6:	f200 809a 	bhi.w	d542e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d52fa:	e8df f003 	tbb	[pc, r3]
   d52fe:	4404      	.short	0x4404
   d5300:	98989898 	.word	0x98989898
   d5304:	8b80      	.short	0x8b80
        case BLE_EVT_CONNECTED: {
            BlePeerDevice peer;
   d5306:	a806      	add	r0, sp, #24
   d5308:	f7ff ffde 	bl	d52c8 <_ZN8particle13BlePeerDeviceC1Ev>
   d530c:	9b06      	ldr	r3, [sp, #24]

            peer.impl()->connParams.conn_sup_timeout = event->params.connected.conn_sup_timeout;
   d530e:	89a2      	ldrh	r2, [r4, #12]
   d5310:	829a      	strh	r2, [r3, #20]
            peer.impl()->connParams.slave_latency = event->params.connected.slave_latency;
   d5312:	8962      	ldrh	r2, [r4, #10]
   d5314:	825a      	strh	r2, [r3, #18]
            peer.impl()->connParams.max_conn_interval = event->params.connected.conn_interval;
   d5316:	8922      	ldrh	r2, [r4, #8]
   d5318:	821a      	strh	r2, [r3, #16]
            peer.impl()->connParams.min_conn_interval = event->params.connected.conn_interval;
   d531a:	8922      	ldrh	r2, [r4, #8]
   d531c:	81da      	strh	r2, [r3, #14]
            peer.impl()->connHandle = event->params.connected.conn_handle;
   d531e:	8b22      	ldrh	r2, [r4, #24]
   d5320:	82da      	strh	r2, [r3, #22]
   d5322:	4622      	mov	r2, r4
   d5324:	7da1      	ldrb	r1, [r4, #22]
   d5326:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d532a:	9004      	str	r0, [sp, #16]
   d532c:	8892      	ldrh	r2, [r2, #4]
   d532e:	f8ad 2014 	strh.w	r2, [sp, #20]

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d5332:	9804      	ldr	r0, [sp, #16]
   d5334:	f8bd 2014 	ldrh.w	r2, [sp, #20]
typedef void (*BleOnDisconnectedCallback)(const BlePeerDevice& peer, void* context);

class BleAddress : public hal_ble_addr_t {
public:
    BleAddress& operator=(hal_ble_addr_t addr) {
        this->addr_type = addr.addr_type;
   d5338:	71d9      	strb	r1, [r3, #7]
        memcpy(this->addr, addr.addr, BLE_SIG_ADDR_LEN);
   d533a:	f8c3 0001 	str.w	r0, [r3, #1]
   d533e:	f8a3 2005 	strh.w	r2, [r3, #5]
            peer.impl()->address = event->params.connected.peer_addr;

            if (bleInstance->connectedCb_) {
   d5342:	682b      	ldr	r3, [r5, #0]
   d5344:	b113      	cbz	r3, d534c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x70>
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
   d5346:	68a9      	ldr	r1, [r5, #8]
   d5348:	a806      	add	r0, sp, #24
   d534a:	4798      	blx	r3
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
   d534c:	7ba3      	ldrb	r3, [r4, #14]
   d534e:	2b01      	cmp	r3, #1
   d5350:	9b06      	ldr	r3, [sp, #24]
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d5352:	bf0b      	itete	eq
   d5354:	2202      	moveq	r2, #2
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d5356:	2201      	movne	r2, #1

            if (bleInstance->connectedCb_) {
                bleInstance->connectedCb_(peer, bleInstance->connectedContext);
            }
            if (event->params.connected.role == BLE_ROLE_PERIPHERAL) {
                peer.impl()->role = BLE_ROLE_CENTRAL;
   d5358:	701a      	strbeq	r2, [r3, #0]
                bleInstance->peripheralProxy_->peripheralProcessConnected(peer);
            } else {
                peer.impl()->role = BLE_ROLE_PERIPHERAL;
   d535a:	701a      	strbne	r2, [r3, #0]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d535c:	bf0c      	ite	eq
   d535e:	69ac      	ldreq	r4, [r5, #24]
   d5360:	69ec      	ldrne	r4, [r5, #28]
    bool connected() const {
        return peripherals_.size() > 0;
    }

    void centralProcessConnected(const BlePeerDevice& peer) {
        if (peripherals_.size() < BLE_MAX_CENTRAL_COUNT) {
   d5362:	6863      	ldr	r3, [r4, #4]
   d5364:	2b00      	cmp	r3, #0
   d5366:	dc0a      	bgt.n	d537e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xa2>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5368:	a906      	add	r1, sp, #24
   d536a:	a808      	add	r0, sp, #32
   d536c:	f7ff fc21 	bl	d4bb2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            peripherals_.append(peer);
   d5370:	a908      	add	r1, sp, #32
   d5372:	4620      	mov	r0, r4
   d5374:	f7ff fce0 	bl	d4d38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5378:	a809      	add	r0, sp, #36	; 0x24
   d537a:	f7ff fbf6 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d537e:	a807      	add	r0, sp, #28
   d5380:	f7ff fbf3 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5384:	e053      	b.n	d542e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->centralProxy_->centralProcessConnected(peer);
            }
            break;
        }
        case BLE_EVT_DISCONNECTED: {
            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.disconnected.conn_handle);
   d5386:	89a1      	ldrh	r1, [r4, #12]
   d5388:	4628      	mov	r0, r5
   d538a:	f7ff fbcc 	bl	d4b26 <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d538e:	4604      	mov	r4, r0
   d5390:	2800      	cmp	r0, #0
   d5392:	d04c      	beq.n	d542e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDisconnected(*peer);

                if (bleInstance->disconnectedCb_) {
   d5394:	686b      	ldr	r3, [r5, #4]
   d5396:	b10b      	cbz	r3, d539c <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xc0>
                    bleInstance->disconnectedCb_(*peer, bleInstance->disconnectedContext);
   d5398:	68e9      	ldr	r1, [r5, #12]
   d539a:	4798      	blx	r3
   d539c:	6823      	ldr	r3, [r4, #0]
                }
                if (peer->impl()->role == BLE_ROLE_PERIPHERAL) {
   d539e:	781a      	ldrb	r2, [r3, #0]
   d53a0:	2a01      	cmp	r2, #1
   d53a2:	d104      	bne.n	d53ae <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xd2>
                    bleInstance->centralProxy_->centralProcessDisconnected(*peer);
   d53a4:	4621      	mov	r1, r4
   d53a6:	69e8      	ldr	r0, [r5, #28]
   d53a8:	f7ff fc80 	bl	d4cac <_ZN8particle14BleCentralImpl26centralProcessDisconnectedERKNS_13BlePeerDeviceE>
   d53ac:	e03f      	b.n	d542e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d53ae:	69da      	ldr	r2, [r3, #28]
   d53b0:	69a8      	ldr	r0, [r5, #24]
   d53b2:	6813      	ldr	r3, [r2, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d53b4:	6851      	ldr	r1, [r2, #4]
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d53b6:	2600      	movs	r6, #0
   d53b8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
            centrals_.append(peer);
        }
    }

    void peripheralProcessDisconnected(const BlePeerDevice& peer) {
        for (auto& service : peer.impl()->gattsProxy->services()) {
   d53bc:	4299      	cmp	r1, r3
   d53be:	d00d      	beq.n	d53dc <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x100>
   d53c0:	681d      	ldr	r5, [r3, #0]
   d53c2:	69aa      	ldr	r2, [r5, #24]
   d53c4:	69ed      	ldr	r5, [r5, #28]
   d53c6:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
            for (auto& characteristic : service.impl()->characteristics()) {
   d53ca:	4295      	cmp	r5, r2
   d53cc:	d004      	beq.n	d53d8 <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xfc>
   d53ce:	f852 7b08 	ldr.w	r7, [r2], #8
            uuid = newUuid;
        }
    }

    void setValid(bool valid) {
        valid_ = valid;
   d53d2:	f887 605c 	strb.w	r6, [r7, #92]	; 0x5c
   d53d6:	e7f8      	b.n	d53ca <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xee>
   d53d8:	3308      	adds	r3, #8
   d53da:	e7ef      	b.n	d53bc <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0xe0>
   d53dc:	6823      	ldr	r3, [r4, #0]
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
        connHandle = BLE_INVALID_CONN_HANDLE;
   d53de:	f64f 71ff 	movw	r1, #65535	; 0xffff
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d53e2:	2200      	movs	r2, #0
        connHandle = BLE_INVALID_CONN_HANDLE;
   d53e4:	82d9      	strh	r1, [r3, #22]
        rssi = 0x7F;
   d53e6:	217f      	movs	r1, #127	; 0x7f
              gattsProxy(std::make_unique<BleGattServerImpl>(false)) {
    }
    ~BlePeerDeviceImpl() = default;

    void invalidate() {
        role = BLE_ROLE_INVALID;
   d53e8:	701a      	strb	r2, [r3, #0]
        connHandle = BLE_INVALID_CONN_HANDLE;
        rssi = 0x7F;
   d53ea:	7619      	strb	r1, [r3, #24]
        connParams = {};
   d53ec:	f8c3 200a 	str.w	r2, [r3, #10]
   d53f0:	f8c3 200e 	str.w	r2, [r3, #14]
   d53f4:	f8c3 2012 	str.w	r2, [r3, #18]
            for (auto& characteristic : service.impl()->characteristics()) {
                characteristic.impl()->setValid(false);
            }
        }
        peer.impl()->invalidate();
        centrals_.clear();
   d53f8:	f7ff fc1e 	bl	d4c38 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
   d53fc:	e017      	b.n	d542e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
            break;
        }
        case BLE_EVT_DATA_WRITTEN: {
            LOG_DEBUG(TRACE, "onDataWritten, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d53fe:	8aa1      	ldrh	r1, [r4, #20]
   d5400:	4628      	mov	r0, r5
   d5402:	f7ff fb90 	bl	d4b26 <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d5406:	b190      	cbz	r0, d542e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
                bleInstance->gattsProxy_->gattsProcessDataWritten(event->params.data_rec.attr_handle,
                        event->params.data_rec.data, event->params.data_rec.data_len, *peer);
   d5408:	8ae1      	ldrh	r1, [r4, #22]
   d540a:	9000      	str	r0, [sp, #0]
   d540c:	68e3      	ldr	r3, [r4, #12]
   d540e:	6922      	ldr	r2, [r4, #16]
   d5410:	6928      	ldr	r0, [r5, #16]
   d5412:	e00a      	b.n	d542a <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x14e>
            break;
        }
        case BLE_EVT_DATA_NOTIFIED: {
            LOG_DEBUG(TRACE, "onDataNotified, connection: %d, attribute: %d", event->params.data_rec.conn_handle, event->params.data_rec.attr_handle);

            BlePeerDevice* peer = bleInstance->findPeerDevice(event->params.data_rec.conn_handle);
   d5414:	8aa1      	ldrh	r1, [r4, #20]
   d5416:	4628      	mov	r0, r5
   d5418:	f7ff fb85 	bl	d4b26 <_ZN8particle14BleLocalDevice14findPeerDeviceEt>
            if (peer != nullptr) {
   d541c:	b138      	cbz	r0, d542e <_ZN8particle14BleLocalDevice11onBleEventsEPK14hal_ble_evts_tPv+0x152>
   d541e:	6805      	ldr	r5, [r0, #0]
        }
        return ret;
    }

    void gattcProcessDataNotified(BleAttributeHandle attrHandle, const uint8_t* buf, size_t len, const BlePeerDevice& peer) {
        peer.impl()->gattsProxy->gattsProcessDataWritten(attrHandle, buf, len, peer);
   d5420:	8ae1      	ldrh	r1, [r4, #22]
   d5422:	9000      	str	r0, [sp, #0]
   d5424:	68e3      	ldr	r3, [r4, #12]
   d5426:	6922      	ldr	r2, [r4, #16]
   d5428:	69e8      	ldr	r0, [r5, #28]
   d542a:	f7ff fad5 	bl	d49d8 <_ZN8particle17BleGattServerImpl23gattsProcessDataWrittenEtPKhjRKNS_13BlePeerDeviceE>
    if (context == nullptr) {
        return;
    }

    auto bleInstance = static_cast<BleLocalDevice*>(context);
    WiringBleLock lk;
   d542e:	a803      	add	r0, sp, #12
   d5430:	f7ff f948 	bl	d46c4 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
        default:{
            break;
        }
    }
}
   d5434:	b00b      	add	sp, #44	; 0x2c
   d5436:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5438 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5438:	b510      	push	{r4, lr}
   d543a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d543c:	6840      	ldr	r0, [r0, #4]
   d543e:	b108      	cbz	r0, d5444 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5440:	f7fe fe2b 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5444:	4620      	mov	r0, r4
   d5446:	bd10      	pop	{r4, pc}

000d5448 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5448:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d544a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d544c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d544e:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        this->uuid = charUuid;
        this->svcUuid = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5452:	f103 002c 	add.w	r0, r3, #44	; 0x2c
   d5456:	f000 fc3a 	bl	d5cce <_ZN6StringD1Ev>
   d545a:	4668      	mov	r0, sp
   d545c:	f7ff ffec 	bl	d5438 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5460:	b003      	add	sp, #12
   d5462:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5468 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5468:	b538      	push	{r3, r4, r5, lr}
   d546a:	2300      	movs	r3, #0
   d546c:	4604      	mov	r4, r0
   d546e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5470:	2014      	movs	r0, #20
   d5472:	460d      	mov	r5, r1
   d5474:	f7fe fe0f 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5478:	b128      	cbz	r0, d5486 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d547a:	2301      	movs	r3, #1
   d547c:	6043      	str	r3, [r0, #4]
   d547e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5480:	4b02      	ldr	r3, [pc, #8]	; (d548c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5482:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5484:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5486:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5488:	4620      	mov	r0, r4
   d548a:	bd38      	pop	{r3, r4, r5, pc}
   d548c:	000d6634 	.word	0x000d6634

000d5490 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
BleCharacteristic::BleCharacteristic(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
        : impl_(std::make_shared<BleCharacteristicImpl>(desc, properties, callback, context)) {
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5494:	b088      	sub	sp, #32
   d5496:	4606      	mov	r6, r0
   d5498:	461d      	mov	r5, r3
   d549a:	2060      	movs	r0, #96	; 0x60
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d549c:	2300      	movs	r3, #0
   d549e:	4688      	mov	r8, r1
   d54a0:	4617      	mov	r7, r2
   d54a2:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d54a4:	9305      	str	r3, [sp, #20]
   d54a6:	f7fe fdf6 	bl	d4096 <_Znwj>
   d54aa:	f8cd d018 	str.w	sp, [sp, #24]
   d54ae:	4604      	mov	r4, r0
   d54b0:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d54b2:	b300      	cbz	r0, d54f6 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x66>
              svcImpl(nullptr),
              valid_(false) {
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d54b4:	f7ff fa70 	bl	d4998 <_ZN8particle21BleCharacteristicImplC1Ev>
        this->description = desc;
   d54b8:	4641      	mov	r1, r8
   d54ba:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d54be:	f000 fc60 	bl	d5d82 <_ZN6StringaSEPKc>
        this->properties = properties;
        this->dataCb = callback;
   d54c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d54c4:	64e3      	str	r3, [r4, #76]	; 0x4c
        this->context = context;
   d54c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d54c8:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        this->description = desc;
        this->properties = properties;
   d54ca:	7027      	strb	r7, [r4, #0]
        this->context = context;
    }

    BleCharacteristicImpl(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        this->uuid = charUuid;
   d54cc:	462b      	mov	r3, r5
   d54ce:	1ca2      	adds	r2, r4, #2
   d54d0:	f105 0114 	add.w	r1, r5, #20
   d54d4:	f853 0b04 	ldr.w	r0, [r3], #4
   d54d8:	f842 0b04 	str.w	r0, [r2], #4
   d54dc:	428b      	cmp	r3, r1
   d54de:	d1f9      	bne.n	d54d4 <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x44>
        this->svcUuid = svcUuid;
   d54e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d54e2:	f104 0216 	add.w	r2, r4, #22
   d54e6:	f103 0114 	add.w	r1, r3, #20
   d54ea:	f853 0b04 	ldr.w	r0, [r3], #4
   d54ee:	f842 0b04 	str.w	r0, [r2], #4
   d54f2:	428b      	cmp	r3, r1
   d54f4:	d1f9      	bne.n	d54ea <_ZN8particle17BleCharacteristic9constructEPKcNS_25BleCharacteristicPropertyERNS_7BleUuidES5_PFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x5a>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d54f6:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d54f8:	2500      	movs	r5, #0
   d54fa:	ab01      	add	r3, sp, #4
   d54fc:	aa02      	add	r2, sp, #8
   d54fe:	a803      	add	r0, sp, #12
   d5500:	9507      	str	r5, [sp, #28]
   d5502:	f7ff ffb1 	bl	d5468 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5506:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5508:	9a05      	ldr	r2, [sp, #20]
   d550a:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d550c:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d550e:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5510:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5512:	f7ff fb2a 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5516:	a806      	add	r0, sp, #24
   d5518:	f7ff ff8e 	bl	d5438 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d551c:	9b04      	ldr	r3, [sp, #16]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d551e:	9a05      	ldr	r2, [sp, #20]
   d5520:	6831      	ldr	r1, [r6, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5522:	6033      	str	r3, [r6, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5524:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5526:	6873      	ldr	r3, [r6, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5528:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d552a:	6072      	str	r2, [r6, #4]
	_M_pi = __tmp;
   d552c:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5530:	9505      	str	r5, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5532:	9504      	str	r5, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5534:	f7ff fb19 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5538:	a805      	add	r0, sp, #20
   d553a:	f7ff fb16 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

void BleCharacteristic::construct(const char* desc, BleCharacteristicProperty properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d553e:	b008      	add	sp, #32
   d5540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5544 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5544:	b510      	push	{r4, lr}
   d5546:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5548:	6840      	ldr	r0, [r0, #4]
   d554a:	b108      	cbz	r0, d5550 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d554c:	f7fe fda5 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5550:	4620      	mov	r0, r4
   d5552:	bd10      	pop	{r4, pc}

000d5554 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5554:	b573      	push	{r0, r1, r4, r5, r6, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5556:	6905      	ldr	r5, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5558:	300c      	adds	r0, #12
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d555a:	69ac      	ldr	r4, [r5, #24]
   d555c:	69eb      	ldr	r3, [r5, #28]
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d555e:	e88d 0021 	stmia.w	sp, {r0, r5}
   d5562:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5566:	42a6      	cmp	r6, r4
   d5568:	d004      	beq.n	d5574 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x20>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d556a:	1d20      	adds	r0, r4, #4
   d556c:	f7ff fafd 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5570:	3408      	adds	r4, #8
   d5572:	e7f8      	b.n	d5566 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5574:	69a8      	ldr	r0, [r5, #24]
   d5576:	f7ff f839 	bl	d45ec <free>
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d557a:	4668      	mov	r0, sp
   d557c:	f7ff ffe2 	bl	d5544 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5580:	b002      	add	sp, #8
   d5582:	bd70      	pop	{r4, r5, r6, pc}

000d5584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5584:	b538      	push	{r3, r4, r5, lr}
   d5586:	2300      	movs	r3, #0
   d5588:	4604      	mov	r4, r0
   d558a:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d558c:	2014      	movs	r0, #20
   d558e:	460d      	mov	r5, r1
   d5590:	f7fe fd81 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5594:	b128      	cbz	r0, d55a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5596:	2301      	movs	r3, #1
   d5598:	6043      	str	r3, [r0, #4]
   d559a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d559c:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d559e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d55a0:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d55a2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d55a4:	4620      	mov	r0, r4
   d55a6:	bd38      	pop	{r3, r4, r5, pc}
   d55a8:	000d6650 	.word	0x000d6650

000d55ac <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
}

BleService::BleService(const BleUuid& uuid)
   d55ac:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d55ae:	2600      	movs	r6, #0
   d55b0:	b087      	sub	sp, #28
   d55b2:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d55b4:	6046      	str	r6, [r0, #4]
   d55b6:	4607      	mov	r7, r0
   d55b8:	2024      	movs	r0, #36	; 0x24
   d55ba:	460d      	mov	r5, r1
   d55bc:	f7fe fd6b 	bl	d4096 <_Znwj>
   d55c0:	f8cd d010 	str.w	sp, [sp, #16]
   d55c4:	4604      	mov	r4, r0
   d55c6:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d55c8:	b1a0      	cbz	r0, d55f4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x48>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid(),
              startHandle(BLE_INVALID_ATTR_HANDLE),
              endHandle(BLE_INVALID_ATTR_HANDLE) {
   d55ca:	f7ff f864 	bl	d4696 <_ZN8particle7BleUuidC1Ev>
   d55ce:	82a6      	strh	r6, [r4, #20]
   d55d0:	82e6      	strh	r6, [r4, #22]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d55d2:	61a6      	str	r6, [r4, #24]
   d55d4:	61e6      	str	r6, [r4, #28]
   d55d6:	6226      	str	r6, [r4, #32]
    }
    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid = svcUuid;
   d55d8:	462b      	mov	r3, r5
   d55da:	4622      	mov	r2, r4
   d55dc:	f105 0610 	add.w	r6, r5, #16
   d55e0:	6818      	ldr	r0, [r3, #0]
   d55e2:	6859      	ldr	r1, [r3, #4]
   d55e4:	4615      	mov	r5, r2
   d55e6:	c503      	stmia	r5!, {r0, r1}
   d55e8:	3308      	adds	r3, #8
   d55ea:	42b3      	cmp	r3, r6
   d55ec:	462a      	mov	r2, r5
   d55ee:	d1f7      	bne.n	d55e0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x34>
   d55f0:	6818      	ldr	r0, [r3, #0]
   d55f2:	6028      	str	r0, [r5, #0]

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d55f4:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d55f6:	4621      	mov	r1, r4
   d55f8:	9305      	str	r3, [sp, #20]
   d55fa:	aa02      	add	r2, sp, #8
   d55fc:	ab01      	add	r3, sp, #4
   d55fe:	a803      	add	r0, sp, #12
   d5600:	f7ff ffc0 	bl	d5584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5604:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5606:	687a      	ldr	r2, [r7, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5608:	603c      	str	r4, [r7, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d560a:	607b      	str	r3, [r7, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d560c:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d560e:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5610:	f7ff faab 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5614:	a804      	add	r0, sp, #16
   d5616:	f7ff ff95 	bl	d5544 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
        : impl_(std::make_shared<BleServiceImpl>()) {
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
}
   d561a:	4638      	mov	r0, r7
   d561c:	b007      	add	sp, #28
   d561e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5620 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE>:
        DEBUG("services.append(service)");
        services_.append(svc);
        return SYSTEM_ERROR_NONE;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
   d5620:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5622:	680b      	ldr	r3, [r1, #0]
   d5624:	b087      	sub	sp, #28
   d5626:	4605      	mov	r5, r0
   d5628:	460c      	mov	r4, r1
        if (characteristic.impl() == nullptr) {
   d562a:	2b00      	cmp	r3, #0
   d562c:	d046      	beq.n	d56bc <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x9c>
            return SYSTEM_ERROR_INVALID_ARGUMENT;
        }
        characteristic.impl()->isLocal = local_;
   d562e:	7b02      	ldrb	r2, [r0, #12]
   d5630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        if (local_) {
   d5634:	7b03      	ldrb	r3, [r0, #12]
   d5636:	b1c3      	cbz	r3, d566a <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x4a>
            LOG_DEBUG(TRACE, "< LOCAL CHARACTERISTIC >");
            if (!characteristic.impl()->svcUuid.isValid()) {
   d5638:	6808      	ldr	r0, [r1, #0]
   d563a:	3016      	adds	r0, #22
   d563c:	f7ff f8ee 	bl	d481c <_ZNK8particle7BleUuid7isValidEv>
   d5640:	b998      	cbnz	r0, d566a <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x4a>
                BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID);
   d5642:	2201      	movs	r2, #1
   d5644:	4921      	ldr	r1, [pc, #132]	; (d56cc <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xac>)
   d5646:	a801      	add	r0, sp, #4
   d5648:	f7ff f853 	bl	d46f2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d564c:	6823      	ldr	r3, [r4, #0]
                LOG_DEBUG(TRACE, "Assign default service UUID.");
                characteristic.impl()->svcUuid = newUuid;
   d564e:	aa01      	add	r2, sp, #4
   d5650:	3316      	adds	r3, #22
   d5652:	af05      	add	r7, sp, #20
   d5654:	4616      	mov	r6, r2
   d5656:	ce03      	ldmia	r6!, {r0, r1}
   d5658:	42be      	cmp	r6, r7
   d565a:	6018      	str	r0, [r3, #0]
   d565c:	6059      	str	r1, [r3, #4]
   d565e:	4632      	mov	r2, r6
   d5660:	f103 0308 	add.w	r3, r3, #8
   d5664:	d1f6      	bne.n	d5654 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x34>
   d5666:	6830      	ldr	r0, [r6, #0]
   d5668:	6018      	str	r0, [r3, #0]
            }
        }
        BleService* service = getService(characteristic.impl()->svcUuid);
   d566a:	6826      	ldr	r6, [r4, #0]
   d566c:	3616      	adds	r6, #22
   d566e:	4631      	mov	r1, r6
   d5670:	4628      	mov	r0, r5
   d5672:	f7ff f9f2 	bl	d4a5a <_ZN8particle17BleGattServerImpl10getServiceERKNS_7BleUuidE>
        if (service != nullptr) {
   d5676:	b130      	cbz	r0, d5686 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x66>
   d5678:	6800      	ldr	r0, [r0, #0]
            if (service->impl() != nullptr) {
   d567a:	b308      	cbz	r0, d56c0 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa0>
                return service->impl()->addCharacteristic(characteristic);
   d567c:	4621      	mov	r1, r4
   d567e:	f7ff fcb3 	bl	d4fe8 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>
   d5682:	4604      	mov	r4, r0
   d5684:	e01e      	b.n	d56c4 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa4>
            }
            return SYSTEM_ERROR_INTERNAL;
        } else {
            BleService service(characteristic.impl()->svcUuid);
   d5686:	4631      	mov	r1, r6
   d5688:	a801      	add	r0, sp, #4
   d568a:	f7ff ff8f 	bl	d55ac <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
            if (addService(service) == SYSTEM_ERROR_NONE) {
   d568e:	a901      	add	r1, sp, #4
   d5690:	4628      	mov	r0, r5
   d5692:	f7ff fd71 	bl	d5178 <_ZN8particle17BleGattServerImpl10addServiceERNS_10BleServiceE>
   d5696:	b958      	cbnz	r0, d56b0 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x90>
   d5698:	686b      	ldr	r3, [r5, #4]
   d569a:	682a      	ldr	r2, [r5, #0]
   d569c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d56a0:	3b01      	subs	r3, #1
                return services_.last().impl()->addCharacteristic(characteristic);
   d56a2:	4621      	mov	r1, r4
   d56a4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   d56a8:	f7ff fc9e 	bl	d4fe8 <_ZN8particle14BleServiceImpl17addCharacteristicERNS_17BleCharacteristicE>
   d56ac:	4604      	mov	r4, r0
   d56ae:	e001      	b.n	d56b4 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0x94>
            }
            return SYSTEM_ERROR_INTERNAL;
   d56b0:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56b4:	a802      	add	r0, sp, #8
   d56b6:	f7ff fa58 	bl	d4b6a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d56ba:	e003      	b.n	d56c4 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa4>
        return SYSTEM_ERROR_NONE;
    }

    int addCharacteristic(BleCharacteristic& characteristic) {
        if (characteristic.impl() == nullptr) {
            return SYSTEM_ERROR_INVALID_ARGUMENT;
   d56bc:	4c04      	ldr	r4, [pc, #16]	; (d56d0 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xb0>)
   d56be:	e001      	b.n	d56c4 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE+0xa4>
        BleService* service = getService(characteristic.impl()->svcUuid);
        if (service != nullptr) {
            if (service->impl() != nullptr) {
                return service->impl()->addCharacteristic(characteristic);
            }
            return SYSTEM_ERROR_INTERNAL;
   d56c0:	f06f 04f9 	mvn.w	r4, #249	; 0xf9
            if (addService(service) == SYSTEM_ERROR_NONE) {
                return services_.last().impl()->addCharacteristic(characteristic);
            }
            return SYSTEM_ERROR_INTERNAL;
        }
    }
   d56c4:	4620      	mov	r0, r4
   d56c6:	b007      	add	sp, #28
   d56c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d56ca:	bf00      	nop
   d56cc:	000d6680 	.word	0x000d6680
   d56d0:	fffffef2 	.word	0xfffffef2

000d56d4 <_ZNK8particle14BleLocalDevice17addCharacteristicERNS_17BleCharacteristicE>:
int BleLocalDevice::disconnect(const BlePeerDevice& peripheral) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return centralProxy_->disconnect(peripheral);
}

int BleLocalDevice::addCharacteristic(BleCharacteristic& characteristic) const {
   d56d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d56d6:	4604      	mov	r4, r0
   d56d8:	460d      	mov	r5, r1
    WiringBleLock lk;
   d56da:	a801      	add	r0, sp, #4
   d56dc:	f7fe ffe4 	bl	d46a8 <_ZN8particle3ble13WiringBleLockC1Ev>
    return gattsProxy_->addCharacteristic(characteristic);
   d56e0:	4629      	mov	r1, r5
   d56e2:	6920      	ldr	r0, [r4, #16]
   d56e4:	f7ff ff9c 	bl	d5620 <_ZN8particle17BleGattServerImpl17addCharacteristicERNS_17BleCharacteristicE>
   d56e8:	4604      	mov	r4, r0
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return centralProxy_->disconnect(peripheral);
}

int BleLocalDevice::addCharacteristic(BleCharacteristic& characteristic) const {
    WiringBleLock lk;
   d56ea:	a801      	add	r0, sp, #4
   d56ec:	f7fe ffea 	bl	d46c4 <_ZN8particle3ble13WiringBleLockD1Ev>
    return gattsProxy_->addCharacteristic(characteristic);
}
   d56f0:	4620      	mov	r0, r4
   d56f2:	b003      	add	sp, #12
   d56f4:	bd30      	pop	{r4, r5, pc}
	...

000d56f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d56f8:	4802      	ldr	r0, [pc, #8]	; (d5704 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d56fa:	2300      	movs	r3, #0
   d56fc:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d56fe:	f7fe bdc9 	b.w	d4294 <os_mutex_recursive_create>
   d5702:	bf00      	nop
   d5704:	2003e3d4 	.word	0x2003e3d4

000d5708 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5708:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d570a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d570c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d570e:	b113      	cbz	r3, d5716 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5710:	2203      	movs	r2, #3
   d5712:	4601      	mov	r1, r0
   d5714:	4798      	blx	r3
    }
   d5716:	4620      	mov	r0, r4
   d5718:	bd10      	pop	{r4, pc}

000d571a <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d571a:	2200      	movs	r2, #0
   d571c:	4611      	mov	r1, r2
   d571e:	6840      	ldr	r0, [r0, #4]
   d5720:	f7fe bf44 	b.w	d45ac <network_listening>

000d5724 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5724:	2200      	movs	r2, #0
   d5726:	4611      	mov	r1, r2
   d5728:	6840      	ldr	r0, [r0, #4]
   d572a:	f7fe bf4f 	b.w	d45cc <network_get_listen_timeout>

000d572e <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d572e:	2200      	movs	r2, #0
   d5730:	6840      	ldr	r0, [r0, #4]
   d5732:	f7fe bf43 	b.w	d45bc <network_set_listen_timeout>

000d5736 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5736:	2200      	movs	r2, #0
   d5738:	f081 0101 	eor.w	r1, r1, #1
   d573c:	6840      	ldr	r0, [r0, #4]
   d573e:	f7fe bf2d 	b.w	d459c <network_listen>

000d5742 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5742:	2300      	movs	r3, #0
   d5744:	461a      	mov	r2, r3
   d5746:	4619      	mov	r1, r3
   d5748:	6840      	ldr	r0, [r0, #4]
   d574a:	f7fe bf1f 	b.w	d458c <network_off>

000d574e <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d574e:	2300      	movs	r3, #0
   d5750:	461a      	mov	r2, r3
   d5752:	4619      	mov	r1, r3
   d5754:	6840      	ldr	r0, [r0, #4]
   d5756:	f7fe bf11 	b.w	d457c <network_on>

000d575a <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d575a:	2200      	movs	r2, #0
   d575c:	4611      	mov	r1, r2
   d575e:	6840      	ldr	r0, [r0, #4]
   d5760:	f7fe bf04 	b.w	d456c <network_ready>

000d5764 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5764:	2200      	movs	r2, #0
   d5766:	4611      	mov	r1, r2
   d5768:	6840      	ldr	r0, [r0, #4]
   d576a:	f7fe beef 	b.w	d454c <network_connecting>

000d576e <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d576e:	2200      	movs	r2, #0
   d5770:	2102      	movs	r1, #2
   d5772:	6840      	ldr	r0, [r0, #4]
   d5774:	f7fe bef2 	b.w	d455c <network_disconnect>

000d5778 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5778:	2300      	movs	r3, #0
   d577a:	461a      	mov	r2, r3
   d577c:	6840      	ldr	r0, [r0, #4]
   d577e:	f7fe bedd 	b.w	d453c <network_connect>
	...

000d5784 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5784:	4b02      	ldr	r3, [pc, #8]	; (d5790 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5786:	2203      	movs	r2, #3
   d5788:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d578a:	4a02      	ldr	r2, [pc, #8]	; (d5794 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d578c:	601a      	str	r2, [r3, #0]
   d578e:	4770      	bx	lr
   d5790:	2003e3d8 	.word	0x2003e3d8
   d5794:	000d6734 	.word	0x000d6734

000d5798 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d5798:	4770      	bx	lr

000d579a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d579a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d579c:	4606      	mov	r6, r0
   d579e:	4615      	mov	r5, r2
   d57a0:	460c      	mov	r4, r1
   d57a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d57a4:	42bc      	cmp	r4, r7
   d57a6:	d006      	beq.n	d57b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d57a8:	6833      	ldr	r3, [r6, #0]
   d57aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d57ae:	689b      	ldr	r3, [r3, #8]
   d57b0:	4630      	mov	r0, r6
   d57b2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d57b4:	e7f6      	b.n	d57a4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d57b6:	4628      	mov	r0, r5
   d57b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d57ba <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d57ba:	2200      	movs	r2, #0
   d57bc:	7c00      	ldrb	r0, [r0, #16]
   d57be:	f7fe bdb9 	b.w	d4334 <HAL_I2C_Write_Data>

000d57c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d57c2:	2100      	movs	r1, #0
   d57c4:	7c00      	ldrb	r0, [r0, #16]
   d57c6:	f7fe bdbd 	b.w	d4344 <HAL_I2C_Available_Data>

000d57ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d57ca:	2100      	movs	r1, #0
   d57cc:	7c00      	ldrb	r0, [r0, #16]
   d57ce:	f7fe bdc1 	b.w	d4354 <HAL_I2C_Read_Data>

000d57d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d57d2:	2100      	movs	r1, #0
   d57d4:	7c00      	ldrb	r0, [r0, #16]
   d57d6:	f7fe bdc5 	b.w	d4364 <HAL_I2C_Peek_Data>

000d57da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d57da:	2100      	movs	r1, #0
   d57dc:	7c00      	ldrb	r0, [r0, #16]
   d57de:	f7fe bdc9 	b.w	d4374 <HAL_I2C_Flush_Data>

000d57e2 <_ZN7TwoWireD0Ev>:
   d57e2:	b510      	push	{r4, lr}
   d57e4:	2114      	movs	r1, #20
   d57e6:	4604      	mov	r4, r0
   d57e8:	f000 fcff 	bl	d61ea <_ZdlPvj>
   d57ec:	4620      	mov	r0, r4
   d57ee:	bd10      	pop	{r4, pc}

000d57f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d57f0:	b510      	push	{r4, lr}
   d57f2:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d57f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d57f8:	4608      	mov	r0, r1
   d57fa:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d57fc:	2100      	movs	r1, #0
   d57fe:	4b04      	ldr	r3, [pc, #16]	; (d5810 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5800:	7420      	strb	r0, [r4, #16]
   d5802:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5804:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5806:	f7fe fdc5 	bl	d4394 <HAL_I2C_Init>

}
   d580a:	4620      	mov	r0, r4
   d580c:	bd10      	pop	{r4, pc}
   d580e:	bf00      	nop
   d5810:	000d6768 	.word	0x000d6768

000d5814 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5814:	2100      	movs	r1, #0
   d5816:	7c00      	ldrb	r0, [r0, #16]
   d5818:	f7fe bdb4 	b.w	d4384 <HAL_I2C_Is_Enabled>

000d581c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d581c:	4770      	bx	lr

000d581e <_ZN9IPAddressD0Ev>:
   d581e:	b510      	push	{r4, lr}
   d5820:	2118      	movs	r1, #24
   d5822:	4604      	mov	r4, r0
   d5824:	f000 fce1 	bl	d61ea <_ZdlPvj>
   d5828:	4620      	mov	r0, r4
   d582a:	bd10      	pop	{r4, pc}

000d582c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d582c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d582e:	7d03      	ldrb	r3, [r0, #20]
   d5830:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5832:	b08d      	sub	sp, #52	; 0x34
   d5834:	460e      	mov	r6, r1
   d5836:	f100 0704 	add.w	r7, r0, #4
   d583a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d583e:	d002      	beq.n	d5846 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5840:	f100 0508 	add.w	r5, r0, #8
   d5844:	e018      	b.n	d5878 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5846:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5848:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d584a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d584e:	232f      	movs	r3, #47	; 0x2f
   d5850:	462a      	mov	r2, r5
   d5852:	200a      	movs	r0, #10
   d5854:	f7fe fda6 	bl	d43a4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5858:	4628      	mov	r0, r5
   d585a:	f000 fe85 	bl	d6568 <strlen>
   d585e:	6833      	ldr	r3, [r6, #0]
   d5860:	4602      	mov	r2, r0
   d5862:	68db      	ldr	r3, [r3, #12]
   d5864:	4629      	mov	r1, r5
   d5866:	4630      	mov	r0, r6
   d5868:	4798      	blx	r3
   d586a:	e00f      	b.n	d588c <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d586c:	b124      	cbz	r4, d5878 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d586e:	212e      	movs	r1, #46	; 0x2e
   d5870:	4630      	mov	r0, r6
   d5872:	f000 f9c7 	bl	d5c04 <_ZN5Print5printEc>
   d5876:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d5878:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d587c:	220a      	movs	r2, #10
   d587e:	4630      	mov	r0, r6
   d5880:	f000 f9f0 	bl	d5c64 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5884:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5886:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5888:	d1f0      	bne.n	d586c <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d588a:	4620      	mov	r0, r4
    }
    return n;
}
   d588c:	b00d      	add	sp, #52	; 0x34
   d588e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5890 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5890:	b510      	push	{r4, lr}
   d5892:	4b05      	ldr	r3, [pc, #20]	; (d58a8 <_ZN9IPAddressC1Ev+0x18>)
   d5894:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5896:	2211      	movs	r2, #17
   d5898:	f840 3b04 	str.w	r3, [r0], #4
   d589c:	2100      	movs	r1, #0
   d589e:	f000 fe32 	bl	d6506 <memset>
{
    clear();
}
   d58a2:	4620      	mov	r0, r4
   d58a4:	bd10      	pop	{r4, pc}
   d58a6:	bf00      	nop
   d58a8:	000d6790 	.word	0x000d6790

000d58ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d58ac:	4603      	mov	r3, r0
   d58ae:	4a07      	ldr	r2, [pc, #28]	; (d58cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d58b0:	b510      	push	{r4, lr}
   d58b2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d58b6:	f101 0210 	add.w	r2, r1, #16
   d58ba:	f851 4b04 	ldr.w	r4, [r1], #4
   d58be:	f843 4b04 	str.w	r4, [r3], #4
   d58c2:	4291      	cmp	r1, r2
   d58c4:	d1f9      	bne.n	d58ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d58c6:	780a      	ldrb	r2, [r1, #0]
   d58c8:	701a      	strb	r2, [r3, #0]
}
   d58ca:	bd10      	pop	{r4, pc}
   d58cc:	000d6790 	.word	0x000d6790

000d58d0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d58d0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d58d2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d58d6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d58da:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d58de:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d58e2:	2304      	movs	r3, #4
   d58e4:	6041      	str	r1, [r0, #4]
   d58e6:	7503      	strb	r3, [r0, #20]
   d58e8:	bd10      	pop	{r4, pc}

000d58ea <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d58ea:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d58ec:	780d      	ldrb	r5, [r1, #0]
   d58ee:	788b      	ldrb	r3, [r1, #2]
   d58f0:	784a      	ldrb	r2, [r1, #1]
   d58f2:	78c9      	ldrb	r1, [r1, #3]
   d58f4:	9100      	str	r1, [sp, #0]
   d58f6:	4629      	mov	r1, r5
   d58f8:	f7ff ffea 	bl	d58d0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d58fc:	b003      	add	sp, #12
   d58fe:	bd30      	pop	{r4, r5, pc}

000d5900 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5900:	4b01      	ldr	r3, [pc, #4]	; (d5908 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5902:	4a02      	ldr	r2, [pc, #8]	; (d590c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5904:	601a      	str	r2, [r3, #0]
   d5906:	4770      	bx	lr
   d5908:	2003e3e0 	.word	0x2003e3e0
   d590c:	000d6851 	.word	0x000d6851

000d5910 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5910:	2200      	movs	r2, #0
   d5912:	4611      	mov	r1, r2
   d5914:	6840      	ldr	r0, [r0, #4]
   d5916:	f7fe be49 	b.w	d45ac <network_listening>

000d591a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d591a:	2200      	movs	r2, #0
   d591c:	4611      	mov	r1, r2
   d591e:	6840      	ldr	r0, [r0, #4]
   d5920:	f7fe be54 	b.w	d45cc <network_get_listen_timeout>

000d5924 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5924:	2200      	movs	r2, #0
   d5926:	6840      	ldr	r0, [r0, #4]
   d5928:	f7fe be48 	b.w	d45bc <network_set_listen_timeout>

000d592c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d592c:	2200      	movs	r2, #0
   d592e:	f081 0101 	eor.w	r1, r1, #1
   d5932:	6840      	ldr	r0, [r0, #4]
   d5934:	f7fe be32 	b.w	d459c <network_listen>

000d5938 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5938:	2300      	movs	r3, #0
   d593a:	461a      	mov	r2, r3
   d593c:	4619      	mov	r1, r3
   d593e:	6840      	ldr	r0, [r0, #4]
   d5940:	f7fe be24 	b.w	d458c <network_off>

000d5944 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5944:	2300      	movs	r3, #0
   d5946:	461a      	mov	r2, r3
   d5948:	4619      	mov	r1, r3
   d594a:	6840      	ldr	r0, [r0, #4]
   d594c:	f7fe be16 	b.w	d457c <network_on>

000d5950 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5950:	2200      	movs	r2, #0
   d5952:	4611      	mov	r1, r2
   d5954:	6840      	ldr	r0, [r0, #4]
   d5956:	f7fe be09 	b.w	d456c <network_ready>

000d595a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d595a:	2200      	movs	r2, #0
   d595c:	4611      	mov	r1, r2
   d595e:	6840      	ldr	r0, [r0, #4]
   d5960:	f7fe bdf4 	b.w	d454c <network_connecting>

000d5964 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5964:	2200      	movs	r2, #0
   d5966:	2102      	movs	r1, #2
   d5968:	6840      	ldr	r0, [r0, #4]
   d596a:	f7fe bdf7 	b.w	d455c <network_disconnect>

000d596e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d596e:	2300      	movs	r3, #0
   d5970:	461a      	mov	r2, r3
   d5972:	6840      	ldr	r0, [r0, #4]
   d5974:	f7fe bde2 	b.w	d453c <network_connect>

000d5978 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d5978:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d597a:	4605      	mov	r5, r0
   d597c:	b188      	cbz	r0, d59a2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d597e:	6804      	ldr	r4, [r0, #0]
   d5980:	b14c      	cbz	r4, d5996 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5982:	68a3      	ldr	r3, [r4, #8]
   d5984:	b11b      	cbz	r3, d598e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5986:	2203      	movs	r2, #3
   d5988:	4621      	mov	r1, r4
   d598a:	4620      	mov	r0, r4
   d598c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d598e:	2110      	movs	r1, #16
   d5990:	4620      	mov	r0, r4
   d5992:	f000 fc2a 	bl	d61ea <_ZdlPvj>
   d5996:	4628      	mov	r0, r5
   d5998:	2114      	movs	r1, #20
      }
   d599a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d599e:	f000 bc24 	b.w	d61ea <_ZdlPvj>
   d59a2:	bd38      	pop	{r3, r4, r5, pc}

000d59a4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d59a4:	b110      	cbz	r0, d59ac <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d59a6:	6803      	ldr	r3, [r0, #0]
   d59a8:	685b      	ldr	r3, [r3, #4]
   d59aa:	4718      	bx	r3
   d59ac:	4770      	bx	lr

000d59ae <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d59ae:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d59b0:	6803      	ldr	r3, [r0, #0]
   d59b2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d59b4:	b1bb      	cbz	r3, d59e6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d59b6:	6858      	ldr	r0, [r3, #4]
   d59b8:	f7fe fc4c 	bl	d4254 <os_thread_is_current>
   d59bc:	b978      	cbnz	r0, d59de <_ZN6ThreadD1Ev+0x30>
   d59be:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d59c0:	7c5a      	ldrb	r2, [r3, #17]
   d59c2:	b912      	cbnz	r2, d59ca <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d59c4:	6858      	ldr	r0, [r3, #4]
   d59c6:	f7fe fc4d 	bl	d4264 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d59ca:	6823      	ldr	r3, [r4, #0]
   d59cc:	6858      	ldr	r0, [r3, #4]
   d59ce:	f7fe fc51 	bl	d4274 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d59d2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d59d4:	2300      	movs	r3, #0
   d59d6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d59d8:	b128      	cbz	r0, d59e6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d59da:	f7ff ffcd 	bl	d5978 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59de:	6820      	ldr	r0, [r4, #0]
   d59e0:	b108      	cbz	r0, d59e6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d59e2:	f7ff ffc9 	bl	d5978 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d59e6:	4620      	mov	r0, r4
   d59e8:	bd10      	pop	{r4, pc}
	...

000d59ec <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d59ec:	b538      	push	{r3, r4, r5, lr}
   d59ee:	4b0c      	ldr	r3, [pc, #48]	; (d5a20 <_ZN5spark9MeshClassD1Ev+0x34>)
   d59f0:	6003      	str	r3, [r0, #0]
   d59f2:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59f4:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d59f8:	b108      	cbz	r0, d59fe <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d59fa:	f7fe fb50 	bl	d409e <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59fe:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5a02:	b135      	cbz	r5, d5a12 <_ZN5spark9MeshClassD1Ev+0x26>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5a04:	4628      	mov	r0, r5
   d5a06:	f7ff ffd2 	bl	d59ae <_ZN6ThreadD1Ev>
   d5a0a:	2104      	movs	r1, #4
   d5a0c:	4628      	mov	r0, r5
   d5a0e:	f000 fbec 	bl	d61ea <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5a12:	68a0      	ldr	r0, [r4, #8]
   d5a14:	b108      	cbz	r0, d5a1a <_ZN5spark9MeshClassD1Ev+0x2e>
	  get_deleter()(__ptr);
   d5a16:	f7ff ffc5 	bl	d59a4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	bd38      	pop	{r3, r4, r5, pc}
   d5a1e:	bf00      	nop
   d5a20:	000d6884 	.word	0x000d6884

000d5a24 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5a24:	b538      	push	{r3, r4, r5, lr}
   d5a26:	4c0d      	ldr	r4, [pc, #52]	; (d5a5c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5a28:	4b0d      	ldr	r3, [pc, #52]	; (d5a60 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5a2a:	6023      	str	r3, [r4, #0]
   d5a2c:	2500      	movs	r5, #0
   d5a2e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5a30:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5a34:	6063      	str	r3, [r4, #4]
   d5a36:	60a5      	str	r5, [r4, #8]
   d5a38:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5a3c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5a40:	f7fe fc28 	bl	d4294 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5a44:	4b07      	ldr	r3, [pc, #28]	; (d5a64 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5a46:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5a4a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5a4c:	4620      	mov	r0, r4
   d5a4e:	4a06      	ldr	r2, [pc, #24]	; (d5a68 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5a50:	4906      	ldr	r1, [pc, #24]	; (d5a6c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5a56:	f000 bbc3 	b.w	d61e0 <__aeabi_atexit>
   d5a5a:	bf00      	nop
   d5a5c:	2003e3e4 	.word	0x2003e3e4
   d5a60:	000d68b8 	.word	0x000d68b8
   d5a64:	000d6884 	.word	0x000d6884
   d5a68:	2003e3a4 	.word	0x2003e3a4
   d5a6c:	000d59ed 	.word	0x000d59ed

000d5a70 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5a70:	2300      	movs	r3, #0
   d5a72:	461a      	mov	r2, r3
   d5a74:	6840      	ldr	r0, [r0, #4]
   d5a76:	f7fe bd61 	b.w	d453c <network_connect>

000d5a7a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5a7a:	2200      	movs	r2, #0
   d5a7c:	2102      	movs	r1, #2
   d5a7e:	6840      	ldr	r0, [r0, #4]
   d5a80:	f7fe bd6c 	b.w	d455c <network_disconnect>

000d5a84 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5a84:	2200      	movs	r2, #0
   d5a86:	4611      	mov	r1, r2
   d5a88:	6840      	ldr	r0, [r0, #4]
   d5a8a:	f7fe bd5f 	b.w	d454c <network_connecting>

000d5a8e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5a8e:	2200      	movs	r2, #0
   d5a90:	4611      	mov	r1, r2
   d5a92:	6840      	ldr	r0, [r0, #4]
   d5a94:	f7fe bd6a 	b.w	d456c <network_ready>

000d5a98 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5a98:	2300      	movs	r3, #0
   d5a9a:	461a      	mov	r2, r3
   d5a9c:	4619      	mov	r1, r3
   d5a9e:	6840      	ldr	r0, [r0, #4]
   d5aa0:	f7fe bd6c 	b.w	d457c <network_on>

000d5aa4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5aa4:	2300      	movs	r3, #0
   d5aa6:	461a      	mov	r2, r3
   d5aa8:	4619      	mov	r1, r3
   d5aaa:	6840      	ldr	r0, [r0, #4]
   d5aac:	f7fe bd6e 	b.w	d458c <network_off>

000d5ab0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5ab0:	2200      	movs	r2, #0
   d5ab2:	f081 0101 	eor.w	r1, r1, #1
   d5ab6:	6840      	ldr	r0, [r0, #4]
   d5ab8:	f7fe bd70 	b.w	d459c <network_listen>

000d5abc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5abc:	2200      	movs	r2, #0
   d5abe:	6840      	ldr	r0, [r0, #4]
   d5ac0:	f7fe bd7c 	b.w	d45bc <network_set_listen_timeout>

000d5ac4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5ac4:	2200      	movs	r2, #0
   d5ac6:	4611      	mov	r1, r2
   d5ac8:	6840      	ldr	r0, [r0, #4]
   d5aca:	f7fe bd7f 	b.w	d45cc <network_get_listen_timeout>

000d5ace <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5ace:	2200      	movs	r2, #0
   d5ad0:	4611      	mov	r1, r2
   d5ad2:	6840      	ldr	r0, [r0, #4]
   d5ad4:	f7fe bd6a 	b.w	d45ac <network_listening>

000d5ad8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5adc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5ade:	b095      	sub	sp, #84	; 0x54
   d5ae0:	4616      	mov	r6, r2
   d5ae2:	460d      	mov	r5, r1
   d5ae4:	4607      	mov	r7, r0
    IPAddress addr;
   d5ae6:	f7ff fed3 	bl	d5890 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5aea:	4621      	mov	r1, r4
   d5aec:	2220      	movs	r2, #32
   d5aee:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5af0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5af2:	f000 fd08 	bl	d6506 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5af6:	2340      	movs	r3, #64	; 0x40
   d5af8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5afa:	4621      	mov	r1, r4
   d5afc:	466b      	mov	r3, sp
   d5afe:	aa0c      	add	r2, sp, #48	; 0x30
   d5b00:	4630      	mov	r0, r6
   d5b02:	f7fe fc5f 	bl	d43c4 <netdb_getaddrinfo>
    if (!r) {
   d5b06:	4604      	mov	r4, r0
   d5b08:	2800      	cmp	r0, #0
   d5b0a:	d144      	bne.n	d5b96 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5b0c:	4602      	mov	r2, r0
   d5b0e:	2101      	movs	r1, #1
   d5b10:	6868      	ldr	r0, [r5, #4]
   d5b12:	f7fe fd2b 	bl	d456c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b16:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5b18:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b1a:	4622      	mov	r2, r4
   d5b1c:	6868      	ldr	r0, [r5, #4]
   d5b1e:	f7fe fd25 	bl	d456c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b22:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5b24:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5b26:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b28:	2e00      	cmp	r6, #0
   d5b2a:	d034      	beq.n	d5b96 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5b2c:	2900      	cmp	r1, #0
   d5b2e:	d132      	bne.n	d5b96 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5b30:	6873      	ldr	r3, [r6, #4]
   d5b32:	2b02      	cmp	r3, #2
   d5b34:	d002      	beq.n	d5b3c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5b36:	2b0a      	cmp	r3, #10
   d5b38:	d009      	beq.n	d5b4e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5b3a:	e02a      	b.n	d5b92 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5b3c:	f1b8 0f00 	cmp.w	r8, #0
   d5b40:	d027      	beq.n	d5b92 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5b42:	6971      	ldr	r1, [r6, #20]
   d5b44:	4638      	mov	r0, r7
   d5b46:	3104      	adds	r1, #4
   d5b48:	f7ff fecf 	bl	d58ea <_ZN9IPAddressaSEPKh>
   d5b4c:	e020      	b.n	d5b90 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5b4e:	f1b9 0f00 	cmp.w	r9, #0
   d5b52:	d01e      	beq.n	d5b92 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5b54:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5b56:	2211      	movs	r2, #17
   d5b58:	a801      	add	r0, sp, #4
   d5b5a:	f000 fcd4 	bl	d6506 <memset>
                    a.v = 6;
   d5b5e:	2306      	movs	r3, #6
   d5b60:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5b64:	ad01      	add	r5, sp, #4
   d5b66:	f104 0308 	add.w	r3, r4, #8
   d5b6a:	3418      	adds	r4, #24
   d5b6c:	6818      	ldr	r0, [r3, #0]
   d5b6e:	6859      	ldr	r1, [r3, #4]
   d5b70:	462a      	mov	r2, r5
   d5b72:	c203      	stmia	r2!, {r0, r1}
   d5b74:	3308      	adds	r3, #8
   d5b76:	42a3      	cmp	r3, r4
   d5b78:	4615      	mov	r5, r2
   d5b7a:	d1f7      	bne.n	d5b6c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5b7c:	a901      	add	r1, sp, #4
   d5b7e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5b80:	ad07      	add	r5, sp, #28
   d5b82:	f7ff fe93 	bl	d58ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b88:	1d3c      	adds	r4, r7, #4
   d5b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b8c:	682b      	ldr	r3, [r5, #0]
   d5b8e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5b90:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5b92:	69f6      	ldr	r6, [r6, #28]
   d5b94:	e7c8      	b.n	d5b28 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5b96:	9800      	ldr	r0, [sp, #0]
   d5b98:	f7fe fc0c 	bl	d43b4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5b9c:	4638      	mov	r0, r7
   d5b9e:	b015      	add	sp, #84	; 0x54
   d5ba0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5ba4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5ba4:	4b02      	ldr	r3, [pc, #8]	; (d5bb0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5ba6:	4a03      	ldr	r2, [pc, #12]	; (d5bb4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5ba8:	601a      	str	r2, [r3, #0]
   d5baa:	2200      	movs	r2, #0
   d5bac:	605a      	str	r2, [r3, #4]
   d5bae:	4770      	bx	lr
   d5bb0:	2003e5b4 	.word	0x2003e5b4
   d5bb4:	000d68b8 	.word	0x000d68b8

000d5bb8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bba:	4606      	mov	r6, r0
   d5bbc:	460d      	mov	r5, r1
   d5bbe:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5bc0:	2400      	movs	r4, #0
  while (size--) {
   d5bc2:	42bd      	cmp	r5, r7
   d5bc4:	d00c      	beq.n	d5be0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5bc6:	6833      	ldr	r3, [r6, #0]
   d5bc8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5bcc:	689b      	ldr	r3, [r3, #8]
   d5bce:	4630      	mov	r0, r6
   d5bd0:	4798      	blx	r3
     if (chunk>=0)
   d5bd2:	2800      	cmp	r0, #0
   d5bd4:	db01      	blt.n	d5bda <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5bd6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5bd8:	e7f3      	b.n	d5bc2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5bda:	2c00      	cmp	r4, #0
   d5bdc:	bf08      	it	eq
   d5bde:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5be0:	4620      	mov	r0, r4
   d5be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5be4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5be4:	b570      	push	{r4, r5, r6, lr}
   d5be6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5be8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5bea:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5bec:	b149      	cbz	r1, d5c02 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5bee:	f000 fcbb 	bl	d6568 <strlen>
   d5bf2:	682b      	ldr	r3, [r5, #0]
   d5bf4:	4602      	mov	r2, r0
   d5bf6:	4621      	mov	r1, r4
   d5bf8:	4628      	mov	r0, r5
   d5bfa:	68db      	ldr	r3, [r3, #12]
    }
   d5bfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5c00:	4718      	bx	r3
    }
   d5c02:	bd70      	pop	{r4, r5, r6, pc}

000d5c04 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5c04:	6803      	ldr	r3, [r0, #0]
   d5c06:	689b      	ldr	r3, [r3, #8]
   d5c08:	4718      	bx	r3

000d5c0a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5c0a:	b530      	push	{r4, r5, lr}
   d5c0c:	b08b      	sub	sp, #44	; 0x2c
   d5c0e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5c10:	2100      	movs	r1, #0
   d5c12:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5c16:	2a01      	cmp	r2, #1
   d5c18:	bf98      	it	ls
   d5c1a:	220a      	movls	r2, #10
   d5c1c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5c20:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5c24:	fb05 3312 	mls	r3, r5, r2, r3
   d5c28:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5c2c:	2b09      	cmp	r3, #9
   d5c2e:	bf94      	ite	ls
   d5c30:	3330      	addls	r3, #48	; 0x30
   d5c32:	3337      	addhi	r3, #55	; 0x37
   d5c34:	b2db      	uxtb	r3, r3
   d5c36:	4621      	mov	r1, r4
   d5c38:	f804 3901 	strb.w	r3, [r4], #-1
   d5c3c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5c3e:	2d00      	cmp	r5, #0
   d5c40:	d1ee      	bne.n	d5c20 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5c42:	f7ff ffcf 	bl	d5be4 <_ZN5Print5writeEPKc>
}
   d5c46:	b00b      	add	sp, #44	; 0x2c
   d5c48:	bd30      	pop	{r4, r5, pc}

000d5c4a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5c4a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5c4c:	b92a      	cbnz	r2, d5c5a <_ZN5Print5printEmi+0x10>
   d5c4e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5c50:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5c54:	689b      	ldr	r3, [r3, #8]
   d5c56:	b2c9      	uxtb	r1, r1
   d5c58:	4718      	bx	r3
  else return printNumber(n, base);
   d5c5a:	b2d2      	uxtb	r2, r2
}
   d5c5c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5c60:	f7ff bfd3 	b.w	d5c0a <_ZN5Print11printNumberEmh>

000d5c64 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5c64:	f7ff bff1 	b.w	d5c4a <_ZN5Print5printEmi>

000d5c68 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5c68:	b510      	push	{r4, lr}
   d5c6a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5c6c:	f7ff fd4c 	bl	d5708 <_ZNSt14_Function_baseD1Ev>
   d5c70:	4620      	mov	r0, r4
   d5c72:	bd10      	pop	{r4, pc}

000d5c74 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5c74:	4803      	ldr	r0, [pc, #12]	; (d5c84 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5c76:	4a04      	ldr	r2, [pc, #16]	; (d5c88 <_GLOBAL__sub_I_RGB+0x14>)
   d5c78:	4904      	ldr	r1, [pc, #16]	; (d5c8c <_GLOBAL__sub_I_RGB+0x18>)
   d5c7a:	2300      	movs	r3, #0
   d5c7c:	6083      	str	r3, [r0, #8]
   d5c7e:	f000 baaf 	b.w	d61e0 <__aeabi_atexit>
   d5c82:	bf00      	nop
   d5c84:	2003e5bc 	.word	0x2003e5bc
   d5c88:	2003e3a4 	.word	0x2003e3a4
   d5c8c:	000d5c69 	.word	0x000d5c69

000d5c90 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5c90:	4770      	bx	lr

000d5c92 <_ZN8SPIClassD0Ev>:
   d5c92:	b510      	push	{r4, lr}
   d5c94:	2110      	movs	r1, #16
   d5c96:	4604      	mov	r4, r0
   d5c98:	f000 faa7 	bl	d61ea <_ZdlPvj>
   d5c9c:	4620      	mov	r0, r4
   d5c9e:	bd10      	pop	{r4, pc}

000d5ca0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5ca0:	b570      	push	{r4, r5, r6, lr}
   d5ca2:	4b08      	ldr	r3, [pc, #32]	; (d5cc4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5ca4:	6003      	str	r3, [r0, #0]
   d5ca6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5ca8:	2500      	movs	r5, #0
   d5caa:	460e      	mov	r6, r1
   d5cac:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5cb0:	f7fe fae8 	bl	d4284 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5cb4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5cb6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5cb8:	f7fe fb8c 	bl	d43d4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5cbc:	60a5      	str	r5, [r4, #8]
}
   d5cbe:	4620      	mov	r0, r4
   d5cc0:	bd70      	pop	{r4, r5, r6, pc}
   d5cc2:	bf00      	nop
   d5cc4:	000d68ec 	.word	0x000d68ec

000d5cc8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5cc8:	7900      	ldrb	r0, [r0, #4]
   d5cca:	f7fe bb8b 	b.w	d43e4 <HAL_SPI_Is_Enabled>

000d5cce <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5cce:	b510      	push	{r4, lr}
   d5cd0:	4604      	mov	r4, r0
{
	free(buffer);
   d5cd2:	6800      	ldr	r0, [r0, #0]
   d5cd4:	f7fe fc8a 	bl	d45ec <free>
}
   d5cd8:	4620      	mov	r0, r4
   d5cda:	bd10      	pop	{r4, pc}

000d5cdc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5cdc:	b510      	push	{r4, lr}
   d5cde:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5ce0:	6800      	ldr	r0, [r0, #0]
   d5ce2:	b108      	cbz	r0, d5ce8 <_ZN6String10invalidateEv+0xc>
   d5ce4:	f7fe fc82 	bl	d45ec <free>
	buffer = NULL;
   d5ce8:	2300      	movs	r3, #0
   d5cea:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5cec:	60a3      	str	r3, [r4, #8]
   d5cee:	6063      	str	r3, [r4, #4]
   d5cf0:	bd10      	pop	{r4, pc}

000d5cf2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5cf2:	b538      	push	{r3, r4, r5, lr}
   d5cf4:	4604      	mov	r4, r0
   d5cf6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5cf8:	6800      	ldr	r0, [r0, #0]
   d5cfa:	3101      	adds	r1, #1
   d5cfc:	f7fe fc7e 	bl	d45fc <realloc>
	if (newbuffer) {
   d5d00:	b110      	cbz	r0, d5d08 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5d02:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5d06:	2001      	movs	r0, #1
	}
	return 0;
}
   d5d08:	bd38      	pop	{r3, r4, r5, pc}

000d5d0a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5d0a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5d0c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5d0e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5d10:	b113      	cbz	r3, d5d18 <_ZN6String7reserveEj+0xe>
   d5d12:	6843      	ldr	r3, [r0, #4]
   d5d14:	428b      	cmp	r3, r1
   d5d16:	d207      	bcs.n	d5d28 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5d18:	4620      	mov	r0, r4
   d5d1a:	f7ff ffea 	bl	d5cf2 <_ZN6String12changeBufferEj>
   d5d1e:	b120      	cbz	r0, d5d2a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5d20:	68a3      	ldr	r3, [r4, #8]
   d5d22:	b90b      	cbnz	r3, d5d28 <_ZN6String7reserveEj+0x1e>
   d5d24:	6822      	ldr	r2, [r4, #0]
   d5d26:	7013      	strb	r3, [r2, #0]
   d5d28:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5d2a:	bd10      	pop	{r4, pc}

000d5d2c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5d2c:	b570      	push	{r4, r5, r6, lr}
   d5d2e:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5d30:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5d32:	4604      	mov	r4, r0
   d5d34:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5d36:	f7ff ffe8 	bl	d5d0a <_ZN6String7reserveEj>
   d5d3a:	b918      	cbnz	r0, d5d44 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5d3c:	4620      	mov	r0, r4
   d5d3e:	f7ff ffcd 	bl	d5cdc <_ZN6String10invalidateEv>
		return *this;
   d5d42:	e009      	b.n	d5d58 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5d44:	462a      	mov	r2, r5
   d5d46:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5d48:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5d4a:	6820      	ldr	r0, [r4, #0]
   d5d4c:	f000 fbb5 	bl	d64ba <memcpy>
	buffer[len] = 0;
   d5d50:	6822      	ldr	r2, [r4, #0]
   d5d52:	68a3      	ldr	r3, [r4, #8]
   d5d54:	2100      	movs	r1, #0
   d5d56:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5d58:	4620      	mov	r0, r4
   d5d5a:	bd70      	pop	{r4, r5, r6, pc}

000d5d5c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5d5c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5d5e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5d60:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5d62:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5d64:	6043      	str	r3, [r0, #4]
	len = 0;
   d5d66:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5d68:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5d6a:	460d      	mov	r5, r1
   d5d6c:	b139      	cbz	r1, d5d7e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5d6e:	4608      	mov	r0, r1
   d5d70:	f000 fbfa 	bl	d6568 <strlen>
   d5d74:	4629      	mov	r1, r5
   d5d76:	4602      	mov	r2, r0
   d5d78:	4620      	mov	r0, r4
   d5d7a:	f7ff ffd7 	bl	d5d2c <_ZN6String4copyEPKcj>
}
   d5d7e:	4620      	mov	r0, r4
   d5d80:	bd38      	pop	{r3, r4, r5, pc}

000d5d82 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5d82:	b538      	push	{r3, r4, r5, lr}
   d5d84:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5d86:	460c      	mov	r4, r1
   d5d88:	b141      	cbz	r1, d5d9c <_ZN6StringaSEPKc+0x1a>
   d5d8a:	4608      	mov	r0, r1
   d5d8c:	f000 fbec 	bl	d6568 <strlen>
   d5d90:	4621      	mov	r1, r4
   d5d92:	4602      	mov	r2, r0
   d5d94:	4628      	mov	r0, r5
   d5d96:	f7ff ffc9 	bl	d5d2c <_ZN6String4copyEPKcj>
   d5d9a:	e001      	b.n	d5da0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5d9c:	f7ff ff9e 	bl	d5cdc <_ZN6String10invalidateEv>

	return *this;
}
   d5da0:	4628      	mov	r0, r5
   d5da2:	bd38      	pop	{r3, r4, r5, pc}

000d5da4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5da4:	4b04      	ldr	r3, [pc, #16]	; (d5db8 <_GLOBAL__sub_I_System+0x14>)
   d5da6:	2000      	movs	r0, #0
   d5da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5dac:	7018      	strb	r0, [r3, #0]
   d5dae:	8058      	strh	r0, [r3, #2]
   d5db0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5db2:	f7fe bb97 	b.w	d44e4 <set_system_mode>
   d5db6:	bf00      	nop
   d5db8:	2003e5cc 	.word	0x2003e5cc

000d5dbc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5dbc:	4b02      	ldr	r3, [pc, #8]	; (d5dc8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5dbe:	681a      	ldr	r2, [r3, #0]
   d5dc0:	4b02      	ldr	r3, [pc, #8]	; (d5dcc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5dc2:	601a      	str	r2, [r3, #0]
   d5dc4:	4770      	bx	lr
   d5dc6:	bf00      	nop
   d5dc8:	2003e33c 	.word	0x2003e33c
   d5dcc:	2003e5d4 	.word	0x2003e5d4

000d5dd0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5dd0:	4770      	bx	lr

000d5dd2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5dd2:	7441      	strb	r1, [r0, #17]
   d5dd4:	4770      	bx	lr

000d5dd6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5dd6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5dd8:	7c00      	ldrb	r0, [r0, #16]
   d5dda:	f7fe fb43 	bl	d4464 <HAL_USART_Available_Data_For_Write>
}
   d5dde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5de2:	bd08      	pop	{r3, pc}

000d5de4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5de4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5de6:	7c00      	ldrb	r0, [r0, #16]
   d5de8:	f7fe fb14 	bl	d4414 <HAL_USART_Available_Data>
}
   d5dec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5df0:	bd08      	pop	{r3, pc}

000d5df2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5df2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5df4:	7c00      	ldrb	r0, [r0, #16]
   d5df6:	f7fe fb1d 	bl	d4434 <HAL_USART_Peek_Data>
}
   d5dfa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5dfe:	bf28      	it	cs
   d5e00:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5e04:	bd08      	pop	{r3, pc}

000d5e06 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5e06:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5e08:	7c00      	ldrb	r0, [r0, #16]
   d5e0a:	f7fe fb0b 	bl	d4424 <HAL_USART_Read_Data>
}
   d5e0e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5e12:	bf28      	it	cs
   d5e14:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5e18:	bd08      	pop	{r3, pc}

000d5e1a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5e1a:	7c00      	ldrb	r0, [r0, #16]
   d5e1c:	f7fe bb12 	b.w	d4444 <HAL_USART_Flush_Data>

000d5e20 <_ZN11USARTSerialD0Ev>:
   d5e20:	b510      	push	{r4, lr}
   d5e22:	2114      	movs	r1, #20
   d5e24:	4604      	mov	r4, r0
   d5e26:	f000 f9e0 	bl	d61ea <_ZdlPvj>
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	bd10      	pop	{r4, pc}

000d5e2e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5e2e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5e30:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5e32:	4604      	mov	r4, r0
   d5e34:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5e36:	b925      	cbnz	r5, d5e42 <_ZN11USARTSerial5writeEh+0x14>
   d5e38:	7c00      	ldrb	r0, [r0, #16]
   d5e3a:	f7fe fb13 	bl	d4464 <HAL_USART_Available_Data_For_Write>
   d5e3e:	2800      	cmp	r0, #0
   d5e40:	dd05      	ble.n	d5e4e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5e42:	4631      	mov	r1, r6
   d5e44:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5e4a:	f7fe badb 	b.w	d4404 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5e4e:	4628      	mov	r0, r5
   d5e50:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5e54 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5e54:	b510      	push	{r4, lr}
   d5e56:	4604      	mov	r4, r0
   d5e58:	4608      	mov	r0, r1
   d5e5a:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5e5c:	2200      	movs	r2, #0
   d5e5e:	6062      	str	r2, [r4, #4]
   d5e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5e64:	60a2      	str	r2, [r4, #8]
   d5e66:	4a05      	ldr	r2, [pc, #20]	; (d5e7c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d5e68:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d5e6a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d5e6c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d5e6e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d5e70:	461a      	mov	r2, r3
   d5e72:	f7fe fabf 	bl	d43f4 <HAL_USART_Init>
}
   d5e76:	4620      	mov	r0, r4
   d5e78:	bd10      	pop	{r4, pc}
   d5e7a:	bf00      	nop
   d5e7c:	000d6928 	.word	0x000d6928

000d5e80 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d5e80:	7c00      	ldrb	r0, [r0, #16]
   d5e82:	f7fe bae7 	b.w	d4454 <HAL_USART_Is_Enabled>
	...

000d5e88 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d5e88:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d5e8a:	4d0c      	ldr	r5, [pc, #48]	; (d5ebc <_Z22__fetch_global_Serial1v+0x34>)
   d5e8c:	6829      	ldr	r1, [r5, #0]
   d5e8e:	f011 0401 	ands.w	r4, r1, #1
   d5e92:	d111      	bne.n	d5eb8 <_Z22__fetch_global_Serial1v+0x30>
   d5e94:	4628      	mov	r0, r5
   d5e96:	f7fe f904 	bl	d40a2 <__cxa_guard_acquire>
   d5e9a:	b168      	cbz	r0, d5eb8 <_Z22__fetch_global_Serial1v+0x30>
   d5e9c:	4a08      	ldr	r2, [pc, #32]	; (d5ec0 <_Z22__fetch_global_Serial1v+0x38>)
   d5e9e:	4b09      	ldr	r3, [pc, #36]	; (d5ec4 <_Z22__fetch_global_Serial1v+0x3c>)
   d5ea0:	4809      	ldr	r0, [pc, #36]	; (d5ec8 <_Z22__fetch_global_Serial1v+0x40>)
   d5ea2:	4621      	mov	r1, r4
   d5ea4:	f7ff ffd6 	bl	d5e54 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5ea8:	4628      	mov	r0, r5
   d5eaa:	f7fe f8ff 	bl	d40ac <__cxa_guard_release>
   d5eae:	4a07      	ldr	r2, [pc, #28]	; (d5ecc <_Z22__fetch_global_Serial1v+0x44>)
   d5eb0:	4907      	ldr	r1, [pc, #28]	; (d5ed0 <_Z22__fetch_global_Serial1v+0x48>)
   d5eb2:	4805      	ldr	r0, [pc, #20]	; (d5ec8 <_Z22__fetch_global_Serial1v+0x40>)
   d5eb4:	f000 f994 	bl	d61e0 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5eb8:	4803      	ldr	r0, [pc, #12]	; (d5ec8 <_Z22__fetch_global_Serial1v+0x40>)
   d5eba:	bd38      	pop	{r3, r4, r5, pc}
   d5ebc:	2003e670 	.word	0x2003e670
   d5ec0:	2003e674 	.word	0x2003e674
   d5ec4:	2003e5ec 	.word	0x2003e5ec
   d5ec8:	2003e5d8 	.word	0x2003e5d8
   d5ecc:	2003e3a4 	.word	0x2003e3a4
   d5ed0:	000d5dd1 	.word	0x000d5dd1

000d5ed4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5ed4:	7441      	strb	r1, [r0, #17]
   d5ed6:	4770      	bx	lr

000d5ed8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5ed8:	4770      	bx	lr

000d5eda <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5eda:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5edc:	2100      	movs	r1, #0
   d5ede:	7c00      	ldrb	r0, [r0, #16]
   d5ee0:	f7fe fae0 	bl	d44a4 <HAL_USB_USART_Receive_Data>
}
   d5ee4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5ee8:	bf28      	it	cs
   d5eea:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5eee:	bd08      	pop	{r3, pc}

000d5ef0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5ef0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d5ef2:	2101      	movs	r1, #1
   d5ef4:	7c00      	ldrb	r0, [r0, #16]
   d5ef6:	f7fe fad5 	bl	d44a4 <HAL_USB_USART_Receive_Data>
}
   d5efa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5efe:	bf28      	it	cs
   d5f00:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5f04:	bd08      	pop	{r3, pc}

000d5f06 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5f06:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5f08:	7c00      	ldrb	r0, [r0, #16]
   d5f0a:	f7fe fac3 	bl	d4494 <HAL_USB_USART_Available_Data_For_Write>
}
   d5f0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f12:	bd08      	pop	{r3, pc}

000d5f14 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5f14:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5f16:	7c00      	ldrb	r0, [r0, #16]
   d5f18:	f7fe fab4 	bl	d4484 <HAL_USB_USART_Available_Data>
}
   d5f1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5f20:	bd08      	pop	{r3, pc}

000d5f22 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d5f22:	7c00      	ldrb	r0, [r0, #16]
   d5f24:	f7fe bace 	b.w	d44c4 <HAL_USB_USART_Flush_Data>

000d5f28 <_ZN9USBSerialD0Ev>:
   d5f28:	b510      	push	{r4, lr}
   d5f2a:	2114      	movs	r1, #20
   d5f2c:	4604      	mov	r4, r0
   d5f2e:	f000 f95c 	bl	d61ea <_ZdlPvj>
   d5f32:	4620      	mov	r0, r4
   d5f34:	bd10      	pop	{r4, pc}

000d5f36 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5f36:	b538      	push	{r3, r4, r5, lr}
   d5f38:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f3a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5f3c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5f3e:	f7fe faa9 	bl	d4494 <HAL_USB_USART_Available_Data_For_Write>
   d5f42:	2800      	cmp	r0, #0
   d5f44:	dc01      	bgt.n	d5f4a <_ZN9USBSerial5writeEh+0x14>
   d5f46:	7c60      	ldrb	r0, [r4, #17]
   d5f48:	b128      	cbz	r0, d5f56 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5f4a:	4629      	mov	r1, r5
   d5f4c:	7c20      	ldrb	r0, [r4, #16]
   d5f4e:	f7fe fab1 	bl	d44b4 <HAL_USB_USART_Send_Data>
   d5f52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5f56:	bd38      	pop	{r3, r4, r5, pc}

000d5f58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f58:	b510      	push	{r4, lr}
   d5f5a:	4604      	mov	r4, r0
   d5f5c:	2300      	movs	r3, #0
   d5f5e:	6063      	str	r3, [r4, #4]
   d5f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5f64:	60a3      	str	r3, [r4, #8]
   d5f66:	4b05      	ldr	r3, [pc, #20]	; (d5f7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5f68:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d5f6a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5f6c:	4608      	mov	r0, r1
{
  _serial = serial;
   d5f6e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d5f70:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d5f72:	4611      	mov	r1, r2
   d5f74:	f7fe fa7e 	bl	d4474 <HAL_USB_USART_Init>
}
   d5f78:	4620      	mov	r0, r4
   d5f7a:	bd10      	pop	{r4, pc}
   d5f7c:	000d6958 	.word	0x000d6958

000d5f80 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f80:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5f82:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5f84:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5f86:	2100      	movs	r1, #0
   d5f88:	f000 fabd 	bl	d6506 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d5f8c:	4620      	mov	r0, r4
   d5f8e:	bd10      	pop	{r4, pc}

000d5f90 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5f90:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f92:	4d0e      	ldr	r5, [pc, #56]	; (d5fcc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d5f94:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5f96:	a801      	add	r0, sp, #4
   d5f98:	f7ff fff2 	bl	d5f80 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5f9c:	6829      	ldr	r1, [r5, #0]
   d5f9e:	f011 0401 	ands.w	r4, r1, #1
   d5fa2:	d110      	bne.n	d5fc6 <_Z16_fetch_usbserialv+0x36>
   d5fa4:	4628      	mov	r0, r5
   d5fa6:	f7fe f87c 	bl	d40a2 <__cxa_guard_acquire>
   d5faa:	b160      	cbz	r0, d5fc6 <_Z16_fetch_usbserialv+0x36>
   d5fac:	aa01      	add	r2, sp, #4
   d5fae:	4621      	mov	r1, r4
   d5fb0:	4807      	ldr	r0, [pc, #28]	; (d5fd0 <_Z16_fetch_usbserialv+0x40>)
   d5fb2:	f7ff ffd1 	bl	d5f58 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5fb6:	4628      	mov	r0, r5
   d5fb8:	f7fe f878 	bl	d40ac <__cxa_guard_release>
   d5fbc:	4a05      	ldr	r2, [pc, #20]	; (d5fd4 <_Z16_fetch_usbserialv+0x44>)
   d5fbe:	4906      	ldr	r1, [pc, #24]	; (d5fd8 <_Z16_fetch_usbserialv+0x48>)
   d5fc0:	4803      	ldr	r0, [pc, #12]	; (d5fd0 <_Z16_fetch_usbserialv+0x40>)
   d5fc2:	f000 f90d 	bl	d61e0 <__aeabi_atexit>
	return _usbserial;
}
   d5fc6:	4802      	ldr	r0, [pc, #8]	; (d5fd0 <_Z16_fetch_usbserialv+0x40>)
   d5fc8:	b007      	add	sp, #28
   d5fca:	bd30      	pop	{r4, r5, pc}
   d5fcc:	2003e6f8 	.word	0x2003e6f8
   d5fd0:	2003e6fc 	.word	0x2003e6fc
   d5fd4:	2003e3a4 	.word	0x2003e3a4
   d5fd8:	000d5ed9 	.word	0x000d5ed9

000d5fdc <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5fdc:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d5fde:	4b0f      	ldr	r3, [pc, #60]	; (d601c <serialEventRun+0x40>)
   d5fe0:	b133      	cbz	r3, d5ff0 <serialEventRun+0x14>
   d5fe2:	f7ff ffd5 	bl	d5f90 <_Z16_fetch_usbserialv>
   d5fe6:	6803      	ldr	r3, [r0, #0]
   d5fe8:	691b      	ldr	r3, [r3, #16]
   d5fea:	4798      	blx	r3
   d5fec:	2800      	cmp	r0, #0
   d5fee:	dc0d      	bgt.n	d600c <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d5ff0:	4b0b      	ldr	r3, [pc, #44]	; (d6020 <serialEventRun+0x44>)
   d5ff2:	b133      	cbz	r3, d6002 <serialEventRun+0x26>
   d5ff4:	f7ff ff48 	bl	d5e88 <_Z22__fetch_global_Serial1v>
   d5ff8:	6803      	ldr	r3, [r0, #0]
   d5ffa:	691b      	ldr	r3, [r3, #16]
   d5ffc:	4798      	blx	r3
   d5ffe:	2800      	cmp	r0, #0
   d6000:	dc07      	bgt.n	d6012 <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d6002:	4b08      	ldr	r3, [pc, #32]	; (d6024 <serialEventRun+0x48>)
   d6004:	b143      	cbz	r3, d6018 <serialEventRun+0x3c>
   d6006:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d600a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d600c:	f3af 8000 	nop.w
   d6010:	e7ee      	b.n	d5ff0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6012:	f3af 8000 	nop.w
   d6016:	e7f4      	b.n	d6002 <serialEventRun+0x26>
   d6018:	bd08      	pop	{r3, pc}
   d601a:	bf00      	nop
	...

000d6028 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6028:	b508      	push	{r3, lr}
	serialEventRun();
   d602a:	f7ff ffd7 	bl	d5fdc <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d602e:	f7fe f959 	bl	d42e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6032:	4b01      	ldr	r3, [pc, #4]	; (d6038 <_post_loop+0x10>)
   d6034:	6018      	str	r0, [r3, #0]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	2003e714 	.word	0x2003e714

000d603c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d603c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d603e:	2300      	movs	r3, #0
   d6040:	9300      	str	r3, [sp, #0]
   d6042:	461a      	mov	r2, r3
   d6044:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6048:	f7fe fa66 	bl	d4518 <system_ctrl_set_result>
}
   d604c:	b003      	add	sp, #12
   d604e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6054 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6054:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6056:	8843      	ldrh	r3, [r0, #2]
   d6058:	2b0a      	cmp	r3, #10
   d605a:	d008      	beq.n	d606e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d605c:	2b50      	cmp	r3, #80	; 0x50
   d605e:	d109      	bne.n	d6074 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6060:	4b09      	ldr	r3, [pc, #36]	; (d6088 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6062:	681b      	ldr	r3, [r3, #0]
   d6064:	b13b      	cbz	r3, d6076 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6066:	b003      	add	sp, #12
   d6068:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d606c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d606e:	f7ff ffe5 	bl	d603c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6072:	e006      	b.n	d6082 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6074:	2300      	movs	r3, #0
   d6076:	9300      	str	r3, [sp, #0]
   d6078:	461a      	mov	r2, r3
   d607a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d607e:	f7fe fa4b 	bl	d4518 <system_ctrl_set_result>
        break;
    }
}
   d6082:	b003      	add	sp, #12
   d6084:	f85d fb04 	ldr.w	pc, [sp], #4
   d6088:	2003e710 	.word	0x2003e710

000d608c <module_user_init_hook>:

void module_user_init_hook()
{
   d608c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d608e:	f7fe f919 	bl	d42c4 <HAL_RNG_GetRandomNumber>
   d6092:	4604      	mov	r4, r0
    srand(seed);
   d6094:	f000 fa40 	bl	d6518 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6098:	4b07      	ldr	r3, [pc, #28]	; (d60b8 <module_user_init_hook+0x2c>)
   d609a:	b113      	cbz	r3, d60a2 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d609c:	4620      	mov	r0, r4
   d609e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d60a2:	2100      	movs	r1, #0
   d60a4:	4804      	ldr	r0, [pc, #16]	; (d60b8 <module_user_init_hook+0x2c>)
   d60a6:	f7fe fa41 	bl	d452c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d60aa:	2100      	movs	r1, #0
   d60ac:	4803      	ldr	r0, [pc, #12]	; (d60bc <module_user_init_hook+0x30>)
}
   d60ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d60b2:	f7fe ba27 	b.w	d4504 <system_ctrl_set_app_request_handler>
   d60b6:	bf00      	nop
   d60b8:	00000000 	.word	0x00000000
   d60bc:	000d6055 	.word	0x000d6055

000d60c0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d60c0:	b510      	push	{r4, lr}
   d60c2:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d60c4:	480f      	ldr	r0, [pc, #60]	; (d6104 <pinAvailable+0x44>)
   d60c6:	f7ff fdff 	bl	d5cc8 <_ZN8SPIClass9isEnabledEv>
   d60ca:	b128      	cbz	r0, d60d8 <pinAvailable+0x18>
   d60cc:	f1a4 030b 	sub.w	r3, r4, #11
   d60d0:	2b02      	cmp	r3, #2
   d60d2:	d801      	bhi.n	d60d8 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d60d4:	2000      	movs	r0, #0
   d60d6:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d60d8:	f000 f840 	bl	d615c <_Z19__fetch_global_Wirev>
   d60dc:	f7ff fb9a 	bl	d5814 <_ZN7TwoWire9isEnabledEv>
   d60e0:	b108      	cbz	r0, d60e6 <pinAvailable+0x26>
   d60e2:	2c01      	cmp	r4, #1
   d60e4:	d9f6      	bls.n	d60d4 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d60e6:	f7ff fecf 	bl	d5e88 <_Z22__fetch_global_Serial1v>
   d60ea:	f7ff fec9 	bl	d5e80 <_ZN11USARTSerial9isEnabledEv>
   d60ee:	b118      	cbz	r0, d60f8 <pinAvailable+0x38>
   d60f0:	f1a4 0309 	sub.w	r3, r4, #9
   d60f4:	2b01      	cmp	r3, #1
   d60f6:	d9ed      	bls.n	d60d4 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d60f8:	2c1e      	cmp	r4, #30
   d60fa:	bf8c      	ite	hi
   d60fc:	2000      	movhi	r0, #0
   d60fe:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d6100:	bd10      	pop	{r4, pc}
   d6102:	bf00      	nop
   d6104:	2003e730 	.word	0x2003e730

000d6108 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6108:	281e      	cmp	r0, #30
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d610a:	b538      	push	{r3, r4, r5, lr}
   d610c:	4604      	mov	r4, r0
   d610e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6110:	d80a      	bhi.n	d6128 <pinMode+0x20>
   d6112:	29ff      	cmp	r1, #255	; 0xff
   d6114:	d008      	beq.n	d6128 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d6116:	f7ff ffd3 	bl	d60c0 <pinAvailable>
   d611a:	b128      	cbz	r0, d6128 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d611c:	4629      	mov	r1, r5
   d611e:	4620      	mov	r0, r4
}
   d6120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d6124:	f7fe b8ee 	b.w	d4304 <HAL_Pin_Mode>
   d6128:	bd38      	pop	{r3, r4, r5, pc}

000d612a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d612a:	b538      	push	{r3, r4, r5, lr}
   d612c:	4604      	mov	r4, r0
   d612e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6130:	f7fe f8f0 	bl	d4314 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6134:	28ff      	cmp	r0, #255	; 0xff
   d6136:	d010      	beq.n	d615a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d6138:	2806      	cmp	r0, #6
   d613a:	d804      	bhi.n	d6146 <digitalWrite+0x1c>
   d613c:	234d      	movs	r3, #77	; 0x4d
   d613e:	fa23 f000 	lsr.w	r0, r3, r0
   d6142:	07c3      	lsls	r3, r0, #31
   d6144:	d409      	bmi.n	d615a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6146:	4620      	mov	r0, r4
   d6148:	f7ff ffba 	bl	d60c0 <pinAvailable>
   d614c:	b128      	cbz	r0, d615a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d614e:	4629      	mov	r1, r5
   d6150:	4620      	mov	r0, r4
}
   d6152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6156:	f7fe b8e5 	b.w	d4324 <HAL_GPIO_Write>
   d615a:	bd38      	pop	{r3, r4, r5, pc}

000d615c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d615c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d615e:	4d0b      	ldr	r5, [pc, #44]	; (d618c <_Z19__fetch_global_Wirev+0x30>)
   d6160:	6829      	ldr	r1, [r5, #0]
   d6162:	f011 0401 	ands.w	r4, r1, #1
   d6166:	d10f      	bne.n	d6188 <_Z19__fetch_global_Wirev+0x2c>
   d6168:	4628      	mov	r0, r5
   d616a:	f7fd ff9a 	bl	d40a2 <__cxa_guard_acquire>
   d616e:	b158      	cbz	r0, d6188 <_Z19__fetch_global_Wirev+0x2c>
   d6170:	4621      	mov	r1, r4
   d6172:	4807      	ldr	r0, [pc, #28]	; (d6190 <_Z19__fetch_global_Wirev+0x34>)
   d6174:	f7ff fb3c 	bl	d57f0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d6178:	4628      	mov	r0, r5
   d617a:	f7fd ff97 	bl	d40ac <__cxa_guard_release>
   d617e:	4a05      	ldr	r2, [pc, #20]	; (d6194 <_Z19__fetch_global_Wirev+0x38>)
   d6180:	4905      	ldr	r1, [pc, #20]	; (d6198 <_Z19__fetch_global_Wirev+0x3c>)
   d6182:	4803      	ldr	r0, [pc, #12]	; (d6190 <_Z19__fetch_global_Wirev+0x34>)
   d6184:	f000 f82c 	bl	d61e0 <__aeabi_atexit>
	return wire;
}
   d6188:	4801      	ldr	r0, [pc, #4]	; (d6190 <_Z19__fetch_global_Wirev+0x34>)
   d618a:	bd38      	pop	{r3, r4, r5, pc}
   d618c:	2003e718 	.word	0x2003e718
   d6190:	2003e71c 	.word	0x2003e71c
   d6194:	2003e3a4 	.word	0x2003e3a4
   d6198:	000d5799 	.word	0x000d5799

000d619c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d619c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d619e:	4c0c      	ldr	r4, [pc, #48]	; (d61d0 <_GLOBAL__sub_I_SPI+0x34>)
   d61a0:	4e0c      	ldr	r6, [pc, #48]	; (d61d4 <_GLOBAL__sub_I_SPI+0x38>)
   d61a2:	4d0d      	ldr	r5, [pc, #52]	; (d61d8 <_GLOBAL__sub_I_SPI+0x3c>)
   d61a4:	2100      	movs	r1, #0
   d61a6:	4620      	mov	r0, r4
   d61a8:	f7ff fd7a 	bl	d5ca0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d61ac:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d61ae:	4c0b      	ldr	r4, [pc, #44]	; (d61dc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d61b0:	4632      	mov	r2, r6
   d61b2:	4629      	mov	r1, r5
   d61b4:	f000 f814 	bl	d61e0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d61b8:	2101      	movs	r1, #1
   d61ba:	4620      	mov	r0, r4
   d61bc:	f7ff fd70 	bl	d5ca0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d61c0:	4632      	mov	r2, r6
   d61c2:	4629      	mov	r1, r5
   d61c4:	4620      	mov	r0, r4
   d61c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d61ca:	f000 b809 	b.w	d61e0 <__aeabi_atexit>
   d61ce:	bf00      	nop
   d61d0:	2003e730 	.word	0x2003e730
   d61d4:	2003e3a4 	.word	0x2003e3a4
   d61d8:	000d5c91 	.word	0x000d5c91
   d61dc:	2003e740 	.word	0x2003e740

000d61e0 <__aeabi_atexit>:
   d61e0:	460b      	mov	r3, r1
   d61e2:	4601      	mov	r1, r0
   d61e4:	4618      	mov	r0, r3
   d61e6:	f000 b94b 	b.w	d6480 <__cxa_atexit>

000d61ea <_ZdlPvj>:
   d61ea:	f7fd bf56 	b.w	d409a <_ZdlPv>
	...

000d61f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d61f0:	4b24      	ldr	r3, [pc, #144]	; (d6284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d61f2:	681a      	ldr	r2, [r3, #0]
   d61f4:	07d0      	lsls	r0, r2, #31
   d61f6:	bf5c      	itt	pl
   d61f8:	2201      	movpl	r2, #1
   d61fa:	601a      	strpl	r2, [r3, #0]
   d61fc:	4b22      	ldr	r3, [pc, #136]	; (d6288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d61fe:	681a      	ldr	r2, [r3, #0]
   d6200:	07d1      	lsls	r1, r2, #31
   d6202:	bf5c      	itt	pl
   d6204:	2201      	movpl	r2, #1
   d6206:	601a      	strpl	r2, [r3, #0]
   d6208:	4b20      	ldr	r3, [pc, #128]	; (d628c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d620a:	681a      	ldr	r2, [r3, #0]
   d620c:	07d2      	lsls	r2, r2, #31
   d620e:	bf5c      	itt	pl
   d6210:	2201      	movpl	r2, #1
   d6212:	601a      	strpl	r2, [r3, #0]
   d6214:	4b1e      	ldr	r3, [pc, #120]	; (d6290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d6216:	681a      	ldr	r2, [r3, #0]
   d6218:	07d0      	lsls	r0, r2, #31
   d621a:	bf5c      	itt	pl
   d621c:	2201      	movpl	r2, #1
   d621e:	601a      	strpl	r2, [r3, #0]
   d6220:	4b1c      	ldr	r3, [pc, #112]	; (d6294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d6222:	681a      	ldr	r2, [r3, #0]
   d6224:	07d1      	lsls	r1, r2, #31
   d6226:	bf5c      	itt	pl
   d6228:	2201      	movpl	r2, #1
   d622a:	601a      	strpl	r2, [r3, #0]
   d622c:	4b1a      	ldr	r3, [pc, #104]	; (d6298 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d622e:	681a      	ldr	r2, [r3, #0]
   d6230:	07d2      	lsls	r2, r2, #31
   d6232:	bf5c      	itt	pl
   d6234:	2201      	movpl	r2, #1
   d6236:	601a      	strpl	r2, [r3, #0]
   d6238:	4b18      	ldr	r3, [pc, #96]	; (d629c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d623a:	681a      	ldr	r2, [r3, #0]
   d623c:	07d0      	lsls	r0, r2, #31
   d623e:	bf5c      	itt	pl
   d6240:	2201      	movpl	r2, #1
   d6242:	601a      	strpl	r2, [r3, #0]
   d6244:	4b16      	ldr	r3, [pc, #88]	; (d62a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d6246:	681a      	ldr	r2, [r3, #0]
   d6248:	07d1      	lsls	r1, r2, #31
   d624a:	bf5c      	itt	pl
   d624c:	2201      	movpl	r2, #1
   d624e:	601a      	strpl	r2, [r3, #0]
   d6250:	4b14      	ldr	r3, [pc, #80]	; (d62a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d6252:	681a      	ldr	r2, [r3, #0]
   d6254:	07d2      	lsls	r2, r2, #31
   d6256:	bf5c      	itt	pl
   d6258:	2201      	movpl	r2, #1
   d625a:	601a      	strpl	r2, [r3, #0]
   d625c:	4b12      	ldr	r3, [pc, #72]	; (d62a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d625e:	681a      	ldr	r2, [r3, #0]
   d6260:	07d0      	lsls	r0, r2, #31
   d6262:	bf5c      	itt	pl
   d6264:	2201      	movpl	r2, #1
   d6266:	601a      	strpl	r2, [r3, #0]
   d6268:	4b10      	ldr	r3, [pc, #64]	; (d62ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d626a:	681a      	ldr	r2, [r3, #0]
   d626c:	07d1      	lsls	r1, r2, #31
   d626e:	bf5c      	itt	pl
   d6270:	2201      	movpl	r2, #1
   d6272:	601a      	strpl	r2, [r3, #0]
   d6274:	4b0e      	ldr	r3, [pc, #56]	; (d62b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d6276:	681a      	ldr	r2, [r3, #0]
   d6278:	07d2      	lsls	r2, r2, #31
   d627a:	bf5c      	itt	pl
   d627c:	2201      	movpl	r2, #1
   d627e:	601a      	strpl	r2, [r3, #0]
   d6280:	4770      	bx	lr
   d6282:	bf00      	nop
   d6284:	2003e77c 	.word	0x2003e77c
   d6288:	2003e778 	.word	0x2003e778
   d628c:	2003e774 	.word	0x2003e774
   d6290:	2003e770 	.word	0x2003e770
   d6294:	2003e76c 	.word	0x2003e76c
   d6298:	2003e768 	.word	0x2003e768
   d629c:	2003e764 	.word	0x2003e764
   d62a0:	2003e760 	.word	0x2003e760
   d62a4:	2003e75c 	.word	0x2003e75c
   d62a8:	2003e758 	.word	0x2003e758
   d62ac:	2003e754 	.word	0x2003e754
   d62b0:	2003e750 	.word	0x2003e750

000d62b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d62b4:	4b18      	ldr	r3, [pc, #96]	; (d6318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d62b6:	681a      	ldr	r2, [r3, #0]
   d62b8:	07d1      	lsls	r1, r2, #31
   d62ba:	bf5c      	itt	pl
   d62bc:	2201      	movpl	r2, #1
   d62be:	601a      	strpl	r2, [r3, #0]
   d62c0:	4b16      	ldr	r3, [pc, #88]	; (d631c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d62c2:	681a      	ldr	r2, [r3, #0]
   d62c4:	07d2      	lsls	r2, r2, #31
   d62c6:	bf5c      	itt	pl
   d62c8:	2201      	movpl	r2, #1
   d62ca:	601a      	strpl	r2, [r3, #0]
   d62cc:	4b14      	ldr	r3, [pc, #80]	; (d6320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d62ce:	681a      	ldr	r2, [r3, #0]
   d62d0:	07d0      	lsls	r0, r2, #31
   d62d2:	bf5c      	itt	pl
   d62d4:	2201      	movpl	r2, #1
   d62d6:	601a      	strpl	r2, [r3, #0]
   d62d8:	4b12      	ldr	r3, [pc, #72]	; (d6324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d62da:	681a      	ldr	r2, [r3, #0]
   d62dc:	07d1      	lsls	r1, r2, #31
   d62de:	bf5c      	itt	pl
   d62e0:	2201      	movpl	r2, #1
   d62e2:	601a      	strpl	r2, [r3, #0]
   d62e4:	4b10      	ldr	r3, [pc, #64]	; (d6328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d62e6:	681a      	ldr	r2, [r3, #0]
   d62e8:	07d2      	lsls	r2, r2, #31
   d62ea:	bf5c      	itt	pl
   d62ec:	2201      	movpl	r2, #1
   d62ee:	601a      	strpl	r2, [r3, #0]
   d62f0:	4b0e      	ldr	r3, [pc, #56]	; (d632c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d62f2:	681a      	ldr	r2, [r3, #0]
   d62f4:	07d0      	lsls	r0, r2, #31
   d62f6:	bf5c      	itt	pl
   d62f8:	2201      	movpl	r2, #1
   d62fa:	601a      	strpl	r2, [r3, #0]
   d62fc:	4b0c      	ldr	r3, [pc, #48]	; (d6330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d62fe:	681a      	ldr	r2, [r3, #0]
   d6300:	07d1      	lsls	r1, r2, #31
   d6302:	bf5c      	itt	pl
   d6304:	2201      	movpl	r2, #1
   d6306:	601a      	strpl	r2, [r3, #0]
   d6308:	4b0a      	ldr	r3, [pc, #40]	; (d6334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d630a:	681a      	ldr	r2, [r3, #0]
   d630c:	07d2      	lsls	r2, r2, #31
   d630e:	bf5c      	itt	pl
   d6310:	2201      	movpl	r2, #1
   d6312:	601a      	strpl	r2, [r3, #0]
   d6314:	4770      	bx	lr
   d6316:	bf00      	nop
   d6318:	2003e79c 	.word	0x2003e79c
   d631c:	2003e798 	.word	0x2003e798
   d6320:	2003e794 	.word	0x2003e794
   d6324:	2003e790 	.word	0x2003e790
   d6328:	2003e78c 	.word	0x2003e78c
   d632c:	2003e788 	.word	0x2003e788
   d6330:	2003e784 	.word	0x2003e784
   d6334:	2003e780 	.word	0x2003e780

000d6338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6338:	4b18      	ldr	r3, [pc, #96]	; (d639c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d633a:	681a      	ldr	r2, [r3, #0]
   d633c:	07d1      	lsls	r1, r2, #31
   d633e:	bf5c      	itt	pl
   d6340:	2201      	movpl	r2, #1
   d6342:	601a      	strpl	r2, [r3, #0]
   d6344:	4b16      	ldr	r3, [pc, #88]	; (d63a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6346:	681a      	ldr	r2, [r3, #0]
   d6348:	07d2      	lsls	r2, r2, #31
   d634a:	bf5c      	itt	pl
   d634c:	2201      	movpl	r2, #1
   d634e:	601a      	strpl	r2, [r3, #0]
   d6350:	4b14      	ldr	r3, [pc, #80]	; (d63a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6352:	681a      	ldr	r2, [r3, #0]
   d6354:	07d0      	lsls	r0, r2, #31
   d6356:	bf5c      	itt	pl
   d6358:	2201      	movpl	r2, #1
   d635a:	601a      	strpl	r2, [r3, #0]
   d635c:	4b12      	ldr	r3, [pc, #72]	; (d63a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d635e:	681a      	ldr	r2, [r3, #0]
   d6360:	07d1      	lsls	r1, r2, #31
   d6362:	bf5c      	itt	pl
   d6364:	2201      	movpl	r2, #1
   d6366:	601a      	strpl	r2, [r3, #0]
   d6368:	4b10      	ldr	r3, [pc, #64]	; (d63ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d636a:	681a      	ldr	r2, [r3, #0]
   d636c:	07d2      	lsls	r2, r2, #31
   d636e:	bf5c      	itt	pl
   d6370:	2201      	movpl	r2, #1
   d6372:	601a      	strpl	r2, [r3, #0]
   d6374:	4b0e      	ldr	r3, [pc, #56]	; (d63b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6376:	681a      	ldr	r2, [r3, #0]
   d6378:	07d0      	lsls	r0, r2, #31
   d637a:	bf5c      	itt	pl
   d637c:	2201      	movpl	r2, #1
   d637e:	601a      	strpl	r2, [r3, #0]
   d6380:	4b0c      	ldr	r3, [pc, #48]	; (d63b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6382:	681a      	ldr	r2, [r3, #0]
   d6384:	07d1      	lsls	r1, r2, #31
   d6386:	bf5c      	itt	pl
   d6388:	2201      	movpl	r2, #1
   d638a:	601a      	strpl	r2, [r3, #0]
   d638c:	4b0a      	ldr	r3, [pc, #40]	; (d63b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d638e:	681a      	ldr	r2, [r3, #0]
   d6390:	07d2      	lsls	r2, r2, #31
   d6392:	bf5c      	itt	pl
   d6394:	2201      	movpl	r2, #1
   d6396:	601a      	strpl	r2, [r3, #0]
   d6398:	4770      	bx	lr
   d639a:	bf00      	nop
   d639c:	2003e7bc 	.word	0x2003e7bc
   d63a0:	2003e7b8 	.word	0x2003e7b8
   d63a4:	2003e7b4 	.word	0x2003e7b4
   d63a8:	2003e7b0 	.word	0x2003e7b0
   d63ac:	2003e7ac 	.word	0x2003e7ac
   d63b0:	2003e7a8 	.word	0x2003e7a8
   d63b4:	2003e7a4 	.word	0x2003e7a4
   d63b8:	2003e7a0 	.word	0x2003e7a0

000d63bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d63bc:	4b24      	ldr	r3, [pc, #144]	; (d6450 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d63be:	681a      	ldr	r2, [r3, #0]
   d63c0:	07d0      	lsls	r0, r2, #31
   d63c2:	bf5c      	itt	pl
   d63c4:	2201      	movpl	r2, #1
   d63c6:	601a      	strpl	r2, [r3, #0]
   d63c8:	4b22      	ldr	r3, [pc, #136]	; (d6454 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d63ca:	681a      	ldr	r2, [r3, #0]
   d63cc:	07d1      	lsls	r1, r2, #31
   d63ce:	bf5c      	itt	pl
   d63d0:	2201      	movpl	r2, #1
   d63d2:	601a      	strpl	r2, [r3, #0]
   d63d4:	4b20      	ldr	r3, [pc, #128]	; (d6458 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d63d6:	681a      	ldr	r2, [r3, #0]
   d63d8:	07d2      	lsls	r2, r2, #31
   d63da:	bf5c      	itt	pl
   d63dc:	2201      	movpl	r2, #1
   d63de:	601a      	strpl	r2, [r3, #0]
   d63e0:	4b1e      	ldr	r3, [pc, #120]	; (d645c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d63e2:	681a      	ldr	r2, [r3, #0]
   d63e4:	07d0      	lsls	r0, r2, #31
   d63e6:	bf5c      	itt	pl
   d63e8:	2201      	movpl	r2, #1
   d63ea:	601a      	strpl	r2, [r3, #0]
   d63ec:	4b1c      	ldr	r3, [pc, #112]	; (d6460 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d63ee:	681a      	ldr	r2, [r3, #0]
   d63f0:	07d1      	lsls	r1, r2, #31
   d63f2:	bf5c      	itt	pl
   d63f4:	2201      	movpl	r2, #1
   d63f6:	601a      	strpl	r2, [r3, #0]
   d63f8:	4b1a      	ldr	r3, [pc, #104]	; (d6464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d63fa:	681a      	ldr	r2, [r3, #0]
   d63fc:	07d2      	lsls	r2, r2, #31
   d63fe:	bf5c      	itt	pl
   d6400:	2201      	movpl	r2, #1
   d6402:	601a      	strpl	r2, [r3, #0]
   d6404:	4b18      	ldr	r3, [pc, #96]	; (d6468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6406:	681a      	ldr	r2, [r3, #0]
   d6408:	07d0      	lsls	r0, r2, #31
   d640a:	bf5c      	itt	pl
   d640c:	2201      	movpl	r2, #1
   d640e:	601a      	strpl	r2, [r3, #0]
   d6410:	4b16      	ldr	r3, [pc, #88]	; (d646c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6412:	681a      	ldr	r2, [r3, #0]
   d6414:	07d1      	lsls	r1, r2, #31
   d6416:	bf5c      	itt	pl
   d6418:	2201      	movpl	r2, #1
   d641a:	601a      	strpl	r2, [r3, #0]
   d641c:	4b14      	ldr	r3, [pc, #80]	; (d6470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d641e:	681a      	ldr	r2, [r3, #0]
   d6420:	07d2      	lsls	r2, r2, #31
   d6422:	bf5c      	itt	pl
   d6424:	2201      	movpl	r2, #1
   d6426:	601a      	strpl	r2, [r3, #0]
   d6428:	4b12      	ldr	r3, [pc, #72]	; (d6474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d642a:	681a      	ldr	r2, [r3, #0]
   d642c:	07d0      	lsls	r0, r2, #31
   d642e:	bf5c      	itt	pl
   d6430:	2201      	movpl	r2, #1
   d6432:	601a      	strpl	r2, [r3, #0]
   d6434:	4b10      	ldr	r3, [pc, #64]	; (d6478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6436:	681a      	ldr	r2, [r3, #0]
   d6438:	07d1      	lsls	r1, r2, #31
   d643a:	bf5c      	itt	pl
   d643c:	2201      	movpl	r2, #1
   d643e:	601a      	strpl	r2, [r3, #0]
   d6440:	4b0e      	ldr	r3, [pc, #56]	; (d647c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6442:	681a      	ldr	r2, [r3, #0]
   d6444:	07d2      	lsls	r2, r2, #31
   d6446:	bf5c      	itt	pl
   d6448:	2201      	movpl	r2, #1
   d644a:	601a      	strpl	r2, [r3, #0]
   d644c:	4770      	bx	lr
   d644e:	bf00      	nop
   d6450:	2003e7ec 	.word	0x2003e7ec
   d6454:	2003e7e8 	.word	0x2003e7e8
   d6458:	2003e7e4 	.word	0x2003e7e4
   d645c:	2003e7e0 	.word	0x2003e7e0
   d6460:	2003e7dc 	.word	0x2003e7dc
   d6464:	2003e7d8 	.word	0x2003e7d8
   d6468:	2003e7d4 	.word	0x2003e7d4
   d646c:	2003e7d0 	.word	0x2003e7d0
   d6470:	2003e7cc 	.word	0x2003e7cc
   d6474:	2003e7c8 	.word	0x2003e7c8
   d6478:	2003e7c4 	.word	0x2003e7c4
   d647c:	2003e7c0 	.word	0x2003e7c0

000d6480 <__cxa_atexit>:
   d6480:	b510      	push	{r4, lr}
   d6482:	4c05      	ldr	r4, [pc, #20]	; (d6498 <__cxa_atexit+0x18>)
   d6484:	4613      	mov	r3, r2
   d6486:	b12c      	cbz	r4, d6494 <__cxa_atexit+0x14>
   d6488:	460a      	mov	r2, r1
   d648a:	4601      	mov	r1, r0
   d648c:	2002      	movs	r0, #2
   d648e:	f3af 8000 	nop.w
   d6492:	bd10      	pop	{r4, pc}
   d6494:	4620      	mov	r0, r4
   d6496:	bd10      	pop	{r4, pc}
   d6498:	00000000 	.word	0x00000000

000d649c <memcmp>:
   d649c:	b510      	push	{r4, lr}
   d649e:	3901      	subs	r1, #1
   d64a0:	4402      	add	r2, r0
   d64a2:	4290      	cmp	r0, r2
   d64a4:	d007      	beq.n	d64b6 <memcmp+0x1a>
   d64a6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d64aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d64ae:	42a3      	cmp	r3, r4
   d64b0:	d0f7      	beq.n	d64a2 <memcmp+0x6>
   d64b2:	1b18      	subs	r0, r3, r4
   d64b4:	bd10      	pop	{r4, pc}
   d64b6:	2000      	movs	r0, #0
   d64b8:	bd10      	pop	{r4, pc}

000d64ba <memcpy>:
   d64ba:	b510      	push	{r4, lr}
   d64bc:	1e43      	subs	r3, r0, #1
   d64be:	440a      	add	r2, r1
   d64c0:	4291      	cmp	r1, r2
   d64c2:	d004      	beq.n	d64ce <memcpy+0x14>
   d64c4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d64c8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d64cc:	e7f8      	b.n	d64c0 <memcpy+0x6>
   d64ce:	bd10      	pop	{r4, pc}

000d64d0 <memmove>:
   d64d0:	4288      	cmp	r0, r1
   d64d2:	b510      	push	{r4, lr}
   d64d4:	eb01 0302 	add.w	r3, r1, r2
   d64d8:	d801      	bhi.n	d64de <memmove+0xe>
   d64da:	1e42      	subs	r2, r0, #1
   d64dc:	e00b      	b.n	d64f6 <memmove+0x26>
   d64de:	4298      	cmp	r0, r3
   d64e0:	d2fb      	bcs.n	d64da <memmove+0xa>
   d64e2:	1881      	adds	r1, r0, r2
   d64e4:	1ad2      	subs	r2, r2, r3
   d64e6:	42d3      	cmn	r3, r2
   d64e8:	d004      	beq.n	d64f4 <memmove+0x24>
   d64ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d64ee:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d64f2:	e7f8      	b.n	d64e6 <memmove+0x16>
   d64f4:	bd10      	pop	{r4, pc}
   d64f6:	4299      	cmp	r1, r3
   d64f8:	d004      	beq.n	d6504 <memmove+0x34>
   d64fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   d64fe:	f802 4f01 	strb.w	r4, [r2, #1]!
   d6502:	e7f8      	b.n	d64f6 <memmove+0x26>
   d6504:	bd10      	pop	{r4, pc}

000d6506 <memset>:
   d6506:	4402      	add	r2, r0
   d6508:	4603      	mov	r3, r0
   d650a:	4293      	cmp	r3, r2
   d650c:	d002      	beq.n	d6514 <memset+0xe>
   d650e:	f803 1b01 	strb.w	r1, [r3], #1
   d6512:	e7fa      	b.n	d650a <memset+0x4>
   d6514:	4770      	bx	lr
	...

000d6518 <srand>:
   d6518:	b538      	push	{r3, r4, r5, lr}
   d651a:	4b12      	ldr	r3, [pc, #72]	; (d6564 <srand+0x4c>)
   d651c:	681c      	ldr	r4, [r3, #0]
   d651e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6520:	4605      	mov	r5, r0
   d6522:	b9d3      	cbnz	r3, d655a <srand+0x42>
   d6524:	2018      	movs	r0, #24
   d6526:	f7fe f859 	bl	d45dc <malloc>
   d652a:	f243 330e 	movw	r3, #13070	; 0x330e
   d652e:	63a0      	str	r0, [r4, #56]	; 0x38
   d6530:	8003      	strh	r3, [r0, #0]
   d6532:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d6536:	8043      	strh	r3, [r0, #2]
   d6538:	f241 2334 	movw	r3, #4660	; 0x1234
   d653c:	8083      	strh	r3, [r0, #4]
   d653e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d6542:	80c3      	strh	r3, [r0, #6]
   d6544:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6548:	8103      	strh	r3, [r0, #8]
   d654a:	2305      	movs	r3, #5
   d654c:	8143      	strh	r3, [r0, #10]
   d654e:	230b      	movs	r3, #11
   d6550:	8183      	strh	r3, [r0, #12]
   d6552:	2201      	movs	r2, #1
   d6554:	2300      	movs	r3, #0
   d6556:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d655a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d655c:	2200      	movs	r2, #0
   d655e:	611d      	str	r5, [r3, #16]
   d6560:	615a      	str	r2, [r3, #20]
   d6562:	bd38      	pop	{r3, r4, r5, pc}
   d6564:	2003e3a0 	.word	0x2003e3a0

000d6568 <strlen>:
   d6568:	4603      	mov	r3, r0
   d656a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d656e:	2a00      	cmp	r2, #0
   d6570:	d1fb      	bne.n	d656a <strlen+0x2>
   d6572:	1a18      	subs	r0, r3, r0
   d6574:	3801      	subs	r0, #1
   d6576:	4770      	bx	lr

000d6578 <dynalib_user>:
   d6578:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6588:	0000 0000 696c 6867 5674 6c61 6575 3300     ....lightValue.3
   d6598:	6636 3632 6430 2d65 6230 3339 342d 3533     6f260de-0b93-435
   d65a8:	2d32 6162 3361 352d 6236 6238 3165 3665     2-baa3-56b8be1e6
   d65b8:	3630 0061 3632 3266 3036 6564 302d 3962     06a.26f260de-0b9
   d65c8:	2d33 3334 3235 622d 6161 2d33 3635 3862     3-4352-baa3-56b8
   d65d8:	6562 6531 3036 6136 6400 3163 6233 3633     be1e606a.dc13b36
   d65e8:	2d61 3433 3939 342d 6236 2d30 6361 3131     a-3499-46b0-ac11
   d65f8:	352d 6361 3130 3337 3463 6363 0035 3634     -5ac0173c4cc5.46
   d6608:	3737 3630 6332 612d 3064 2d32 3034 3433     77062c-ad02-4034
   d6618:	392d 6261 2d66 3839 3835 3731 3237 3234     -9abf-9858177242
   d6628:	6337 0000                                   7c..

000d662c <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6634:	461f 000d 4625 000d 5449 000d 464f 000d     .F..%F..IT..OF..
   d6644:	4621 000d                                   !F..

000d6648 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d6650:	4619 000d 4633 000d 5555 000d 4653 000d     .F..3F..UU..SF..
   d6660:	461b 000d                                   .F..

000d6664 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d666c:	4613 000d 4641 000d 4c23 000d 4657 000d     .F..AF..#L..WF..
   d667c:	4615 000d                                   .F..

000d6680 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d6680:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.
   d6690:	6977 6972 676e 622e 656c 5300 6174 7472     wiring.ble.Start
   d66a0:	6420 7369 6f63 6576 6972 676e 7320 7265      discovering ser
   d66b0:	6976 6563 2e73 5300 6174 7472 6420 7369     vices..Start dis
   d66c0:	6f63 6576 6972 676e 6320 6168 6172 7463     covering charact
   d66d0:	7265 7369 6974 7363 002e 6168 5f6c 6c62     eristics..hal_bl
   d66e0:	5f65 6167 7474 635f 696c 6e65 5f74 6964     e_gatt_client_di
   d66f0:	6373 766f 7265 615f 6c6c 735f 7265 6976     scover_all_servi
   d6700:	6563 2873 2029 6166 6c69 6465 203b 6425     ces() failed; %d
   d6710:	4e00 7765 7020 7265 7069 6568 6172 206c     .New peripheral 
   d6720:	6f63 6e6e 6365 6574 2e64 0000               connected...

000d672c <_ZTVN5spark13EthernetClassE>:
	...
   d6734:	5779 000d 576f 000d 5765 000d 575b 000d     yW..oW..eW..[W..
   d6744:	574f 000d 5743 000d 5737 000d 572f 000d     OW..CW..7W../W..
   d6754:	5725 000d 571b 000d 5ad9 000d               %W...W...Z..

000d6760 <_ZTV7TwoWire>:
	...
   d6768:	5799 000d 57e3 000d 57bb 000d 579b 000d     .W...W...W...W..
   d6778:	57c3 000d 57cb 000d 57d3 000d 57db 000d     .W...W...W...W..

000d6788 <_ZTV9IPAddress>:
	...
   d6790:	582d 000d 581d 000d 581f 000d 0066 6e6c     -X...X...X..f.ln
   d67a0:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d67b0:	0a0d 2500 3130 7530 0020 205d 2c00 0020     ...%010u .] ., .
   d67c0:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d67d0:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d67e0:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d67f0:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
   d6800:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
   d6810:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
   d6820:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
   d6830:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
   d6840:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
   d6850:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
   d6860:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
   d6870:	6170 696e 0063 6c61 006c 0000               panic.all...

000d687c <_ZTVN5spark9MeshClassE>:
	...
   d6884:	596f 000d 5965 000d 595b 000d 5951 000d     oY..eY..[Y..QY..
   d6894:	5945 000d 5939 000d 592d 000d 5925 000d     EY..9Y..-Y..%Y..
   d68a4:	591b 000d 5911 000d 5ad9 000d               .Y...Y...Z..

000d68b0 <_ZTVN5spark12NetworkClassE>:
	...
   d68b8:	5a71 000d 5a7b 000d 5a85 000d 5a8f 000d     qZ..{Z...Z...Z..
   d68c8:	5a99 000d 5aa5 000d 5ab1 000d 5abd 000d     .Z...Z...Z...Z..
   d68d8:	5ac5 000d 5acf 000d 5ad9 000d               .Z...Z...Z..

000d68e4 <_ZTV8SPIClass>:
	...
   d68ec:	5c91 000d 5c93 000d 005a 2b25 3330 3a64     .\...\..Z.%+03d:
   d68fc:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d690c:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d691c:	0000 0000                                   ....

000d6920 <_ZTV11USARTSerial>:
	...
   d6928:	5dd1 000d 5e21 000d 5e2f 000d 5bb9 000d     .]..!^../^...[..
   d6938:	5de5 000d 5e07 000d 5df3 000d 5e1b 000d     .]...^...]...^..
   d6948:	5dd3 000d 5dd7 000d                         .]...]..

000d6950 <_ZTV9USBSerial>:
	...
   d6958:	5ed9 000d 5f29 000d 5f37 000d 5bb9 000d     .^..)_..7_...[..
   d6968:	5f15 000d 5edb 000d 5ef1 000d 5f23 000d     ._...^...^..#_..
   d6978:	5f07 000d 5ed5 000d                         ._...^..

000d6980 <__sf_fake_stdin>:
	...

000d69a0 <__sf_fake_stdout>:
	...

000d69c0 <__sf_fake_stderr>:
	...
   d69e0:	0043                                        C.

000d69e2 <link_const_variable_data_end>:
	...

000d69e4 <link_constructors_location>:
   d69e4:	000d41d9 	.word	0x000d41d9
   d69e8:	000d56f9 	.word	0x000d56f9
   d69ec:	000d5785 	.word	0x000d5785
   d69f0:	000d5901 	.word	0x000d5901
   d69f4:	000d5a25 	.word	0x000d5a25
   d69f8:	000d5ba5 	.word	0x000d5ba5
   d69fc:	000d5c75 	.word	0x000d5c75
   d6a00:	000d5da5 	.word	0x000d5da5
   d6a04:	000d5dbd 	.word	0x000d5dbd
   d6a08:	000d619d 	.word	0x000d619d
   d6a0c:	000d61f1 	.word	0x000d61f1
   d6a10:	000d62b5 	.word	0x000d62b5
   d6a14:	000d6339 	.word	0x000d6339
   d6a18:	000d63bd 	.word	0x000d63bd

000d6a1c <link_constructors_end>:
   d6a1c:	00000000 	.word	0x00000000
